
Bluepill_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08005fe8  08005fe8  00015fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f0  080061f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080061f0  080061f0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061f0  080061f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061f0  080061f0  000161f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080061f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000010  08006208  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c0  08006208  000207c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa8c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018db  00000000  00000000  0002aac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c28  00000000  00000000  0002c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  0002cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a23  00000000  00000000  0002db58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000900c  00000000  00000000  0004557b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008afee  00000000  00000000  0004e587  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037c8  00000000  00000000  000d95f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fd0 	.word	0x08005fd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005fd0 	.word	0x08005fd0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bec:	d1ed      	bne.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_fmul>:
 8000d48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d50:	bf1e      	ittt	ne
 8000d52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d56:	ea92 0f0c 	teqne	r2, ip
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d06f      	beq.n	8000e40 <__aeabi_fmul+0xf8>
 8000d60:	441a      	add	r2, r3
 8000d62:	ea80 0c01 	eor.w	ip, r0, r1
 8000d66:	0240      	lsls	r0, r0, #9
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6e:	d01e      	beq.n	8000dae <__aeabi_fmul+0x66>
 8000d70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d88:	bf3e      	ittt	cc
 8000d8a:	0049      	lslcc	r1, r1, #1
 8000d8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d90:	005b      	lslcc	r3, r3, #1
 8000d92:	ea40 0001 	orr.w	r0, r0, r1
 8000d96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d9a:	2afd      	cmp	r2, #253	; 0xfd
 8000d9c:	d81d      	bhi.n	8000dda <__aeabi_fmul+0x92>
 8000d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000da2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da6:	bf08      	it	eq
 8000da8:	f020 0001 	biceq.w	r0, r0, #1
 8000dac:	4770      	bx	lr
 8000dae:	f090 0f00 	teq	r0, #0
 8000db2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db6:	bf08      	it	eq
 8000db8:	0249      	lsleq	r1, r1, #9
 8000dba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dc2:	3a7f      	subs	r2, #127	; 0x7f
 8000dc4:	bfc2      	ittt	gt
 8000dc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dce:	4770      	bxgt	lr
 8000dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	dc5d      	bgt.n	8000e98 <__aeabi_fmul+0x150>
 8000ddc:	f112 0f19 	cmn.w	r2, #25
 8000de0:	bfdc      	itt	le
 8000de2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de6:	4770      	bxle	lr
 8000de8:	f1c2 0200 	rsb	r2, r2, #0
 8000dec:	0041      	lsls	r1, r0, #1
 8000dee:	fa21 f102 	lsr.w	r1, r1, r2
 8000df2:	f1c2 0220 	rsb	r2, r2, #32
 8000df6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfe:	f140 0000 	adc.w	r0, r0, #0
 8000e02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e06:	bf08      	it	eq
 8000e08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0c:	4770      	bx	lr
 8000e0e:	f092 0f00 	teq	r2, #0
 8000e12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0040      	lsleq	r0, r0, #1
 8000e1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1e:	3a01      	subeq	r2, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xce>
 8000e22:	ea40 000c 	orr.w	r0, r0, ip
 8000e26:	f093 0f00 	teq	r3, #0
 8000e2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	bf02      	ittt	eq
 8000e30:	0049      	lsleq	r1, r1, #1
 8000e32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e36:	3b01      	subeq	r3, #1
 8000e38:	d0f9      	beq.n	8000e2e <__aeabi_fmul+0xe6>
 8000e3a:	ea41 010c 	orr.w	r1, r1, ip
 8000e3e:	e78f      	b.n	8000d60 <__aeabi_fmul+0x18>
 8000e40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e44:	ea92 0f0c 	teq	r2, ip
 8000e48:	bf18      	it	ne
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d00a      	beq.n	8000e66 <__aeabi_fmul+0x11e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	d1d8      	bne.n	8000e0e <__aeabi_fmul+0xc6>
 8000e5c:	ea80 0001 	eor.w	r0, r0, r1
 8000e60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e64:	4770      	bx	lr
 8000e66:	f090 0f00 	teq	r0, #0
 8000e6a:	bf17      	itett	ne
 8000e6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e70:	4608      	moveq	r0, r1
 8000e72:	f091 0f00 	teqne	r1, #0
 8000e76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e7a:	d014      	beq.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	d101      	bne.n	8000e86 <__aeabi_fmul+0x13e>
 8000e82:	0242      	lsls	r2, r0, #9
 8000e84:	d10f      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e86:	ea93 0f0c 	teq	r3, ip
 8000e8a:	d103      	bne.n	8000e94 <__aeabi_fmul+0x14c>
 8000e8c:	024b      	lsls	r3, r1, #9
 8000e8e:	bf18      	it	ne
 8000e90:	4608      	movne	r0, r1
 8000e92:	d108      	bne.n	8000ea6 <__aeabi_fmul+0x15e>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea4:	4770      	bx	lr
 8000ea6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eaa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eae:	4770      	bx	lr

08000eb0 <__aeabi_fdiv>:
 8000eb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb8:	bf1e      	ittt	ne
 8000eba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ebe:	ea92 0f0c 	teqne	r2, ip
 8000ec2:	ea93 0f0c 	teqne	r3, ip
 8000ec6:	d069      	beq.n	8000f9c <__aeabi_fdiv+0xec>
 8000ec8:	eba2 0203 	sub.w	r2, r2, r3
 8000ecc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ed0:	0249      	lsls	r1, r1, #9
 8000ed2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed6:	d037      	beq.n	8000f48 <__aeabi_fdiv+0x98>
 8000ed8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000edc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ee0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	bf38      	it	cc
 8000eec:	005b      	lslcc	r3, r3, #1
 8000eee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ef2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	bf24      	itt	cs
 8000efa:	1a5b      	subcs	r3, r3, r1
 8000efc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f12:	bf24      	itt	cs
 8000f14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	bf18      	it	ne
 8000f2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f32:	d1e0      	bne.n	8000ef6 <__aeabi_fdiv+0x46>
 8000f34:	2afd      	cmp	r2, #253	; 0xfd
 8000f36:	f63f af50 	bhi.w	8000dda <__aeabi_fmul+0x92>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f40:	bf08      	it	eq
 8000f42:	f020 0001 	biceq.w	r0, r0, #1
 8000f46:	4770      	bx	lr
 8000f48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f50:	327f      	adds	r2, #127	; 0x7f
 8000f52:	bfc2      	ittt	gt
 8000f54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f5c:	4770      	bxgt	lr
 8000f5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	3a01      	subs	r2, #1
 8000f68:	e737      	b.n	8000dda <__aeabi_fmul+0x92>
 8000f6a:	f092 0f00 	teq	r2, #0
 8000f6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0040      	lsleq	r0, r0, #1
 8000f76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f7a:	3a01      	subeq	r2, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xc2>
 8000f7e:	ea40 000c 	orr.w	r0, r0, ip
 8000f82:	f093 0f00 	teq	r3, #0
 8000f86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	bf02      	ittt	eq
 8000f8c:	0049      	lsleq	r1, r1, #1
 8000f8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f92:	3b01      	subeq	r3, #1
 8000f94:	d0f9      	beq.n	8000f8a <__aeabi_fdiv+0xda>
 8000f96:	ea41 010c 	orr.w	r1, r1, ip
 8000f9a:	e795      	b.n	8000ec8 <__aeabi_fdiv+0x18>
 8000f9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d108      	bne.n	8000fb8 <__aeabi_fdiv+0x108>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	f47f af7d 	bne.w	8000ea6 <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	f47f af70 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	e776      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fb8:	ea93 0f0c 	teq	r3, ip
 8000fbc:	d104      	bne.n	8000fc8 <__aeabi_fdiv+0x118>
 8000fbe:	024b      	lsls	r3, r1, #9
 8000fc0:	f43f af4c 	beq.w	8000e5c <__aeabi_fmul+0x114>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e76e      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fcc:	bf18      	it	ne
 8000fce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fd2:	d1ca      	bne.n	8000f6a <__aeabi_fdiv+0xba>
 8000fd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd8:	f47f af5c 	bne.w	8000e94 <__aeabi_fmul+0x14c>
 8000fdc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fe0:	f47f af3c 	bne.w	8000e5c <__aeabi_fmul+0x114>
 8000fe4:	e75f      	b.n	8000ea6 <__aeabi_fmul+0x15e>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_f2iz>:
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ff0:	d30f      	bcc.n	8001012 <__aeabi_f2iz+0x2a>
 8000ff2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffa:	d90d      	bls.n	8001018 <__aeabi_f2iz+0x30>
 8000ffc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001004:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001008:	fa23 f002 	lsr.w	r0, r3, r2
 800100c:	bf18      	it	ne
 800100e:	4240      	negne	r0, r0
 8001010:	4770      	bx	lr
 8001012:	f04f 0000 	mov.w	r0, #0
 8001016:	4770      	bx	lr
 8001018:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800101c:	d101      	bne.n	8001022 <__aeabi_f2iz+0x3a>
 800101e:	0242      	lsls	r2, r0, #9
 8001020:	d105      	bne.n	800102e <__aeabi_f2iz+0x46>
 8001022:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001026:	bf08      	it	eq
 8001028:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr

08001034 <HAL_TIM_PWM_PulseFinishedCallback>:




void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001040:	f002 fd28 	bl	8003a94 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001b4 	.word	0x200001b4
 8001058:	2000002c 	.word	0x2000002c

0800105c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	b2d9      	uxtb	r1, r3
 800106e:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <Set_LED+0x54>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	LED_Data[LEDnum][1] = Green;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	b2d9      	uxtb	r1, r3
 800107a:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <Set_LED+0x54>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	460a      	mov	r2, r1
 8001084:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	b2d9      	uxtb	r1, r3
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <Set_LED+0x54>)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	460a      	mov	r2, r1
 8001094:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2d9      	uxtb	r1, r3
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <Set_LED+0x54>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	460a      	mov	r2, r1
 80010a4:	70da      	strb	r2, [r3, #3]
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	20000034 	.word	0x20000034
 80010b4:	00000000 	.word	0x00000000

080010b8 <Set_Brightness>:

static void Set_Brightness (int brightness)  // 0-45
{
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS
	if (brightness > 45) brightness = 45;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b2d      	cmp	r3, #45	; 0x2d
 80010c4:	dd01      	ble.n	80010ca <Set_Brightness+0x12>
 80010c6:	232d      	movs	r3, #45	; 0x2d
 80010c8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e05f      	b.n	8001190 <Set_Brightness+0xd8>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80010d0:	4a35      	ldr	r2, [pc, #212]	; (80011a8 <Set_Brightness+0xf0>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 80010d8:	4a34      	ldr	r2, [pc, #208]	; (80011ac <Set_Brightness+0xf4>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		for (int j=1; j<4; j++)
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	e04e      	b.n	8001184 <Set_Brightness+0xcc>
		{
			float angle = 90-brightness;  // in degrees
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fdd7 	bl	8000ca0 <__aeabi_i2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff f98e 	bl	8000418 <__aeabi_f2d>
 80010fc:	a328      	add	r3, pc, #160	; (adr r3, 80011a0 <Set_Brightness+0xe8>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f7ff f9e1 	bl	80004c8 <__aeabi_dmul>
 8001106:	4603      	mov	r3, r0
 8001108:	460c      	mov	r4, r1
 800110a:	4618      	mov	r0, r3
 800110c:	4621      	mov	r1, r4
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <Set_Brightness+0xf8>)
 8001114:	f7ff fb02 	bl	800071c <__aeabi_ddiv>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	f7ff fcb4 	bl	8000a8c <__aeabi_d2f>
 8001124:	4603      	mov	r3, r0
 8001126:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <Set_Brightness+0xf0>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	441a      	add	r2, r3
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f95c 	bl	80003f4 <__aeabi_i2d>
 800113c:	4604      	mov	r4, r0
 800113e:	460d      	mov	r5, r1
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff f969 	bl	8000418 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f003 ff19 	bl	8004f84 <tan>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff fadf 	bl	800071c <__aeabi_ddiv>
 800115e:	4603      	mov	r3, r0
 8001160:	460c      	mov	r4, r1
 8001162:	4618      	mov	r0, r3
 8001164:	4621      	mov	r1, r4
 8001166:	f7ff fc71 	bl	8000a4c <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	b2d9      	uxtb	r1, r3
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <Set_Brightness+0xf4>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	441a      	add	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4413      	add	r3, r2
 800117a:	460a      	mov	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3301      	adds	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2b03      	cmp	r3, #3
 8001188:	ddad      	ble.n	80010e6 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3301      	adds	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b17      	cmp	r3, #23
 8001194:	dd9c      	ble.n	80010d0 <Set_Brightness+0x18>
		}
	}

#endif
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bdb0      	pop	{r4, r5, r7, pc}
 800119e:	bf00      	nop
 80011a0:	53c8d4f1 	.word	0x53c8d4f1
 80011a4:	400921fb 	.word	0x400921fb
 80011a8:	20000034 	.word	0x20000034
 80011ac:	200000f4 	.word	0x200000f4
 80011b0:	40668000 	.word	0x40668000

080011b4 <WS2812_Send>:



static void WS2812_Send (void)
	{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
		uint32_t indx=0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
		uint32_t color;
		for (int i= 0; i<MAX_LED; i++)
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	e036      	b.n	8001232 <WS2812_Send+0x7e>
		{
	#if USE_BRIGHTNESS
			color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80011c4:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <WS2812_Send+0xcc>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4413      	add	r3, r2
 80011cc:	785b      	ldrb	r3, [r3, #1]
 80011ce:	041a      	lsls	r2, r3, #16
 80011d0:	492b      	ldr	r1, [pc, #172]	; (8001280 <WS2812_Send+0xcc>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	431a      	orrs	r2, r3
 80011de:	4928      	ldr	r1, [pc, #160]	; (8001280 <WS2812_Send+0xcc>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	78db      	ldrb	r3, [r3, #3]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	607b      	str	r3, [r7, #4]
	#else
			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
	#endif

			for (int i=23; i>=0; i--)
 80011ec:	2317      	movs	r3, #23
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	e019      	b.n	8001226 <WS2812_Send+0x72>
			{
				if (color&(1<<i))
 80011f2:	2201      	movs	r2, #1
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <WS2812_Send+0x5c>
				{
					pwmData[indx] = 60;  // 2/3 of 90
 8001204:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <WS2812_Send+0xd0>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	213c      	movs	r1, #60	; 0x3c
 800120a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800120e:	e004      	b.n	800121a <WS2812_Send+0x66>
				}
				else pwmData[indx] = 30;  // 1/3 of 90
 8001210:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <WS2812_Send+0xd0>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	211e      	movs	r1, #30
 8001216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				indx++;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
			for (int i=23; i>=0; i--)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3b01      	subs	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dae2      	bge.n	80011f2 <WS2812_Send+0x3e>
		for (int i= 0; i<MAX_LED; i++)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	3301      	adds	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b17      	cmp	r3, #23
 8001236:	ddc5      	ble.n	80011c4 <WS2812_Send+0x10>
			}
		}
		for (int i=0; i<50; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	e00a      	b.n	8001254 <WS2812_Send+0xa0>
		{
			pwmData[indx] = 0;
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <WS2812_Send+0xd0>)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2100      	movs	r1, #0
 8001244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
		for (int i=0; i<50; i++)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	3301      	adds	r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b31      	cmp	r3, #49	; 0x31
 8001258:	ddf1      	ble.n	800123e <WS2812_Send+0x8a>
		}

		HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <WS2812_Send+0xd0>)
 8001260:	2100      	movs	r1, #0
 8001262:	4809      	ldr	r0, [pc, #36]	; (8001288 <WS2812_Send+0xd4>)
 8001264:	f002 fa7c 	bl	8003760 <HAL_TIM_PWM_Start_DMA>
		while (!datasentflag){};
 8001268:	bf00      	nop
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <WS2812_Send+0xd8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0fb      	beq.n	800126a <WS2812_Send+0xb6>
		datasentflag = 0;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <WS2812_Send+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
	}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000f4 	.word	0x200000f4
 8001284:	200001fc 	.word	0x200001fc
 8001288:	200001b4 	.word	0x200001b4
 800128c:	2000002c 	.word	0x2000002c

08001290 <rainbow_effect_left>:
			LED_Data[i][2] = 0;
			LED_Data[i][3] = 0;
		}
	}

static uint8_t rainbow_effect_left() {
 8001290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0

	  float factor1, factor2;
	  uint16_t ind;
	  for(uint16_t j=0;j<24;j++) {
 8001298:	2300      	movs	r3, #0
 800129a:	81fb      	strh	r3, [r7, #14]
 800129c:	e246      	b.n	800172c <rainbow_effect_left+0x49c>
	    ind = effStep + j * 1.625;
 800129e:	4bc6      	ldr	r3, [pc, #792]	; (80015b8 <rainbow_effect_left+0x328>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8a6 	bl	80003f4 <__aeabi_i2d>
 80012a8:	4604      	mov	r4, r0
 80012aa:	460d      	mov	r5, r1
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f8a0 	bl	80003f4 <__aeabi_i2d>
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4bc0      	ldr	r3, [pc, #768]	; (80015bc <rainbow_effect_left+0x32c>)
 80012ba:	f7ff f905 	bl	80004c8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe ff49 	bl	800015c <__adddf3>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f7ff fbbb 	bl	8000a4c <__aeabi_d2uiz>
 80012d6:	4603      	mov	r3, r0
 80012d8:	81bb      	strh	r3, [r7, #12]
	    switch((int)((ind % 13) / 4.333333333333333)) {
 80012da:	89b9      	ldrh	r1, [r7, #12]
 80012dc:	4bb8      	ldr	r3, [pc, #736]	; (80015c0 <rainbow_effect_left+0x330>)
 80012de:	fba3 2301 	umull	r2, r3, r3, r1
 80012e2:	089a      	lsrs	r2, r3, #2
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	1acb      	subs	r3, r1, r3
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f87e 	bl	80003f4 <__aeabi_i2d>
 80012f8:	a3ad      	add	r3, pc, #692	; (adr r3, 80015b0 <rainbow_effect_left+0x320>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff fa0d 	bl	800071c <__aeabi_ddiv>
 8001302:	4603      	mov	r3, r0
 8001304:	460c      	mov	r4, r1
 8001306:	4618      	mov	r0, r3
 8001308:	4621      	mov	r1, r4
 800130a:	f7ff fb77 	bl	80009fc <__aeabi_d2iz>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	f000 809f 	beq.w	8001454 <rainbow_effect_left+0x1c4>
 8001316:	2b02      	cmp	r3, #2
 8001318:	f000 8158 	beq.w	80015cc <rainbow_effect_left+0x33c>
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 8202 	bne.w	8001726 <rainbow_effect_left+0x496>
	      case 0: factor1 = 1.0 - ((float)(ind % 13 - 0 * 4.333333333333333) / 4.333333333333333);
 8001322:	89b9      	ldrh	r1, [r7, #12]
 8001324:	4ba6      	ldr	r3, [pc, #664]	; (80015c0 <rainbow_effect_left+0x330>)
 8001326:	fba3 2301 	umull	r2, r3, r3, r1
 800132a:	089a      	lsrs	r2, r3, #2
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	1acb      	subs	r3, r1, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f85a 	bl	80003f4 <__aeabi_i2d>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fba0 	bl	8000a8c <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f862 	bl	8000418 <__aeabi_f2d>
 8001354:	a396      	add	r3, pc, #600	; (adr r3, 80015b0 <rainbow_effect_left+0x320>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f9df 	bl	800071c <__aeabi_ddiv>
 800135e:	4603      	mov	r3, r0
 8001360:	460c      	mov	r4, r1
 8001362:	461a      	mov	r2, r3
 8001364:	4623      	mov	r3, r4
 8001366:	f04f 0000 	mov.w	r0, #0
 800136a:	4996      	ldr	r1, [pc, #600]	; (80015c4 <rainbow_effect_left+0x334>)
 800136c:	f7fe fef4 	bl	8000158 <__aeabi_dsub>
 8001370:	4603      	mov	r3, r0
 8001372:	460c      	mov	r4, r1
 8001374:	4618      	mov	r0, r3
 8001376:	4621      	mov	r1, r4
 8001378:	f7ff fb88 	bl	8000a8c <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 0) % 13) / 4.333333333333333;
 8001380:	89b9      	ldrh	r1, [r7, #12]
 8001382:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <rainbow_effect_left+0x330>)
 8001384:	fb83 2301 	smull	r2, r3, r3, r1
 8001388:	109a      	asrs	r2, r3, #2
 800138a:	17cb      	asrs	r3, r1, #31
 800138c:	1ad2      	subs	r2, r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	1aca      	subs	r2, r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f7ff fc80 	bl	8000ca0 <__aeabi_i2f>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f838 	bl	8000418 <__aeabi_f2d>
 80013a8:	a381      	add	r3, pc, #516	; (adr r3, 80015b0 <rainbow_effect_left+0x320>)
 80013aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ae:	f7ff f9b5 	bl	800071c <__aeabi_ddiv>
 80013b2:	4603      	mov	r3, r0
 80013b4:	460c      	mov	r4, r1
 80013b6:	4618      	mov	r0, r3
 80013b8:	4621      	mov	r1, r4
 80013ba:	f7ff fb67 	bl	8000a8c <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	607b      	str	r3, [r7, #4]
	              /************ chnaged here *********/
	              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 80013c2:	89fc      	ldrh	r4, [r7, #14]
 80013c4:	4980      	ldr	r1, [pc, #512]	; (80015c8 <rainbow_effect_left+0x338>)
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f7ff fcbe 	bl	8000d48 <__aeabi_fmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461d      	mov	r5, r3
 80013d0:	f04f 0100 	mov.w	r1, #0
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fcb7 	bl	8000d48 <__aeabi_fmul>
 80013da:	4603      	mov	r3, r0
 80013dc:	4619      	mov	r1, r3
 80013de:	4628      	mov	r0, r5
 80013e0:	f7ff fbaa 	bl	8000b38 <__addsf3>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fdfe 	bl	8000fe8 <__aeabi_f2iz>
 80013ec:	4605      	mov	r5, r0
 80013ee:	f04f 0100 	mov.w	r1, #0
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f7ff fca8 	bl	8000d48 <__aeabi_fmul>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461e      	mov	r6, r3
 80013fc:	4972      	ldr	r1, [pc, #456]	; (80015c8 <rainbow_effect_left+0x338>)
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fca2 	bl	8000d48 <__aeabi_fmul>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	4630      	mov	r0, r6
 800140a:	f7ff fb95 	bl	8000b38 <__addsf3>
 800140e:	4603      	mov	r3, r0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fde9 	bl	8000fe8 <__aeabi_f2iz>
 8001416:	4606      	mov	r6, r0
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	68b8      	ldr	r0, [r7, #8]
 800141e:	f7ff fc93 	bl	8000d48 <__aeabi_fmul>
 8001422:	4603      	mov	r3, r0
 8001424:	4698      	mov	r8, r3
 8001426:	f04f 0100 	mov.w	r1, #0
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fc8c 	bl	8000d48 <__aeabi_fmul>
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	4640      	mov	r0, r8
 8001436:	f7ff fb7f 	bl	8000b38 <__addsf3>
 800143a:	4603      	mov	r3, r0
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fdd3 	bl	8000fe8 <__aeabi_f2iz>
 8001442:	4603      	mov	r3, r0
 8001444:	4632      	mov	r2, r6
 8001446:	4629      	mov	r1, r5
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff fe07 	bl	800105c <Set_LED>
	              WS2812_Send();
 800144e:	f7ff feb1 	bl	80011b4 <WS2812_Send>
	              break;
 8001452:	e168      	b.n	8001726 <rainbow_effect_left+0x496>
	      case 1: factor1 = 1.0 - ((float)(ind % 13 - 1 * 4.333333333333333) / 4.333333333333333);
 8001454:	89b9      	ldrh	r1, [r7, #12]
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <rainbow_effect_left+0x330>)
 8001458:	fba3 2301 	umull	r2, r3, r3, r1
 800145c:	089a      	lsrs	r2, r3, #2
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	1acb      	subs	r3, r1, r3
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe ffc1 	bl	80003f4 <__aeabi_i2d>
 8001472:	a34f      	add	r3, pc, #316	; (adr r3, 80015b0 <rainbow_effect_left+0x320>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7fe fe6e 	bl	8000158 <__aeabi_dsub>
 800147c:	4603      	mov	r3, r0
 800147e:	460c      	mov	r4, r1
 8001480:	4618      	mov	r0, r3
 8001482:	4621      	mov	r1, r4
 8001484:	f7ff fb02 	bl	8000a8c <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe ffc4 	bl	8000418 <__aeabi_f2d>
 8001490:	a347      	add	r3, pc, #284	; (adr r3, 80015b0 <rainbow_effect_left+0x320>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f941 	bl	800071c <__aeabi_ddiv>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	461a      	mov	r2, r3
 80014a0:	4623      	mov	r3, r4
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	4947      	ldr	r1, [pc, #284]	; (80015c4 <rainbow_effect_left+0x334>)
 80014a8:	f7fe fe56 	bl	8000158 <__aeabi_dsub>
 80014ac:	4603      	mov	r3, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	4618      	mov	r0, r3
 80014b2:	4621      	mov	r1, r4
 80014b4:	f7ff faea 	bl	8000a8c <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 4.333333333333333) % 13) / 4.333333333333333;
 80014bc:	89bb      	ldrh	r3, [r7, #12]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ff98 	bl	80003f4 <__aeabi_i2d>
 80014c4:	a33a      	add	r3, pc, #232	; (adr r3, 80015b0 <rainbow_effect_left+0x320>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7fe fe45 	bl	8000158 <__aeabi_dsub>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	4618      	mov	r0, r3
 80014d4:	4621      	mov	r1, r4
 80014d6:	f7ff fa91 	bl	80009fc <__aeabi_d2iz>
 80014da:	4601      	mov	r1, r0
 80014dc:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <rainbow_effect_left+0x330>)
 80014de:	fb83 2301 	smull	r2, r3, r3, r1
 80014e2:	109a      	asrs	r2, r3, #2
 80014e4:	17cb      	asrs	r3, r1, #31
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	1aca      	subs	r2, r1, r3
 80014f4:	4610      	mov	r0, r2
 80014f6:	f7ff fbd3 	bl	8000ca0 <__aeabi_i2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ff8b 	bl	8000418 <__aeabi_f2d>
 8001502:	a32b      	add	r3, pc, #172	; (adr r3, 80015b0 <rainbow_effect_left+0x320>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f908 	bl	800071c <__aeabi_ddiv>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	4618      	mov	r0, r3
 8001512:	4621      	mov	r1, r4
 8001514:	f7ff faba 	bl	8000a8c <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 800151c:	89fc      	ldrh	r4, [r7, #14]
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f7ff fc10 	bl	8000d48 <__aeabi_fmul>
 8001528:	4603      	mov	r3, r0
 800152a:	461d      	mov	r5, r3
 800152c:	f04f 0100 	mov.w	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fc09 	bl	8000d48 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4628      	mov	r0, r5
 800153c:	f7ff fafc 	bl	8000b38 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd50 	bl	8000fe8 <__aeabi_f2iz>
 8001548:	4605      	mov	r5, r0
 800154a:	491f      	ldr	r1, [pc, #124]	; (80015c8 <rainbow_effect_left+0x338>)
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f7ff fbfb 	bl	8000d48 <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	461e      	mov	r6, r3
 8001556:	f04f 0100 	mov.w	r1, #0
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fbf4 	bl	8000d48 <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
 8001562:	4619      	mov	r1, r3
 8001564:	4630      	mov	r0, r6
 8001566:	f7ff fae7 	bl	8000b38 <__addsf3>
 800156a:	4603      	mov	r3, r0
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fd3b 	bl	8000fe8 <__aeabi_f2iz>
 8001572:	4606      	mov	r6, r0
 8001574:	f04f 0100 	mov.w	r1, #0
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f7ff fbe5 	bl	8000d48 <__aeabi_fmul>
 800157e:	4603      	mov	r3, r0
 8001580:	4698      	mov	r8, r3
 8001582:	4911      	ldr	r1, [pc, #68]	; (80015c8 <rainbow_effect_left+0x338>)
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fbdf 	bl	8000d48 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	4640      	mov	r0, r8
 8001590:	f7ff fad2 	bl	8000b38 <__addsf3>
 8001594:	4603      	mov	r3, r0
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fd26 	bl	8000fe8 <__aeabi_f2iz>
 800159c:	4603      	mov	r3, r0
 800159e:	4632      	mov	r2, r6
 80015a0:	4629      	mov	r1, r5
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff fd5a 	bl	800105c <Set_LED>
	              WS2812_Send();
 80015a8:	f7ff fe04 	bl	80011b4 <WS2812_Send>
	              break;
 80015ac:	e0bb      	b.n	8001726 <rainbow_effect_left+0x496>
 80015ae:	bf00      	nop
 80015b0:	55555555 	.word	0x55555555
 80015b4:	40115555 	.word	0x40115555
 80015b8:	20000000 	.word	0x20000000
 80015bc:	3ffa0000 	.word	0x3ffa0000
 80015c0:	4ec4ec4f 	.word	0x4ec4ec4f
 80015c4:	3ff00000 	.word	0x3ff00000
 80015c8:	437f0000 	.word	0x437f0000
	      case 2: factor1 = 1.0 - ((float)(ind % 13 - 2 * 4.333333333333333) / 4.333333333333333);
 80015cc:	89b9      	ldrh	r1, [r7, #12]
 80015ce:	4b68      	ldr	r3, [pc, #416]	; (8001770 <rainbow_effect_left+0x4e0>)
 80015d0:	fba3 2301 	umull	r2, r3, r3, r1
 80015d4:	089a      	lsrs	r2, r3, #2
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	1acb      	subs	r3, r1, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff05 	bl	80003f4 <__aeabi_i2d>
 80015ea:	a35d      	add	r3, pc, #372	; (adr r3, 8001760 <rainbow_effect_left+0x4d0>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7fe fdb2 	bl	8000158 <__aeabi_dsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	4618      	mov	r0, r3
 80015fa:	4621      	mov	r1, r4
 80015fc:	f7ff fa46 	bl	8000a8c <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff08 	bl	8000418 <__aeabi_f2d>
 8001608:	a357      	add	r3, pc, #348	; (adr r3, 8001768 <rainbow_effect_left+0x4d8>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff f885 	bl	800071c <__aeabi_ddiv>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	461a      	mov	r2, r3
 8001618:	4623      	mov	r3, r4
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	4955      	ldr	r1, [pc, #340]	; (8001774 <rainbow_effect_left+0x4e4>)
 8001620:	f7fe fd9a 	bl	8000158 <__aeabi_dsub>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	4618      	mov	r0, r3
 800162a:	4621      	mov	r1, r4
 800162c:	f7ff fa2e 	bl	8000a8c <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 8.666666666666666) % 13) / 4.333333333333333;
 8001634:	89bb      	ldrh	r3, [r7, #12]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fedc 	bl	80003f4 <__aeabi_i2d>
 800163c:	a348      	add	r3, pc, #288	; (adr r3, 8001760 <rainbow_effect_left+0x4d0>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe fd89 	bl	8000158 <__aeabi_dsub>
 8001646:	4603      	mov	r3, r0
 8001648:	460c      	mov	r4, r1
 800164a:	4618      	mov	r0, r3
 800164c:	4621      	mov	r1, r4
 800164e:	f7ff f9d5 	bl	80009fc <__aeabi_d2iz>
 8001652:	4601      	mov	r1, r0
 8001654:	4b46      	ldr	r3, [pc, #280]	; (8001770 <rainbow_effect_left+0x4e0>)
 8001656:	fb83 2301 	smull	r2, r3, r3, r1
 800165a:	109a      	asrs	r2, r3, #2
 800165c:	17cb      	asrs	r3, r1, #31
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	1aca      	subs	r2, r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f7ff fb17 	bl	8000ca0 <__aeabi_i2f>
 8001672:	4603      	mov	r3, r0
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fecf 	bl	8000418 <__aeabi_f2d>
 800167a:	a33b      	add	r3, pc, #236	; (adr r3, 8001768 <rainbow_effect_left+0x4d8>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7ff f84c 	bl	800071c <__aeabi_ddiv>
 8001684:	4603      	mov	r3, r0
 8001686:	460c      	mov	r4, r1
 8001688:	4618      	mov	r0, r3
 800168a:	4621      	mov	r1, r4
 800168c:	f7ff f9fe 	bl	8000a8c <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 8001694:	89fc      	ldrh	r4, [r7, #14]
 8001696:	f04f 0100 	mov.w	r1, #0
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f7ff fb54 	bl	8000d48 <__aeabi_fmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461d      	mov	r5, r3
 80016a4:	4934      	ldr	r1, [pc, #208]	; (8001778 <rainbow_effect_left+0x4e8>)
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fb4e 	bl	8000d48 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4628      	mov	r0, r5
 80016b2:	f7ff fa41 	bl	8000b38 <__addsf3>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fc95 	bl	8000fe8 <__aeabi_f2iz>
 80016be:	4605      	mov	r5, r0
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	68b8      	ldr	r0, [r7, #8]
 80016c6:	f7ff fb3f 	bl	8000d48 <__aeabi_fmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461e      	mov	r6, r3
 80016ce:	f04f 0100 	mov.w	r1, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fb38 	bl	8000d48 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4630      	mov	r0, r6
 80016de:	f7ff fa2b 	bl	8000b38 <__addsf3>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fc7f 	bl	8000fe8 <__aeabi_f2iz>
 80016ea:	4606      	mov	r6, r0
 80016ec:	4922      	ldr	r1, [pc, #136]	; (8001778 <rainbow_effect_left+0x4e8>)
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff fb2a 	bl	8000d48 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4698      	mov	r8, r3
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fb23 	bl	8000d48 <__aeabi_fmul>
 8001702:	4603      	mov	r3, r0
 8001704:	4619      	mov	r1, r3
 8001706:	4640      	mov	r0, r8
 8001708:	f7ff fa16 	bl	8000b38 <__addsf3>
 800170c:	4603      	mov	r3, r0
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fc6a 	bl	8000fe8 <__aeabi_f2iz>
 8001714:	4603      	mov	r3, r0
 8001716:	4632      	mov	r2, r6
 8001718:	4629      	mov	r1, r5
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fc9e 	bl	800105c <Set_LED>
	              WS2812_Send();
 8001720:	f7ff fd48 	bl	80011b4 <WS2812_Send>
	              break;
 8001724:	bf00      	nop
	  for(uint16_t j=0;j<24;j++) {
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	3301      	adds	r3, #1
 800172a:	81fb      	strh	r3, [r7, #14]
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	2b17      	cmp	r3, #23
 8001730:	f67f adb5 	bls.w	800129e <rainbow_effect_left+0xe>
	    }
	  }
	  if(effStep >= 13) {effStep=0; return 0x03; }
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <rainbow_effect_left+0x4ec>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d904      	bls.n	8001746 <rainbow_effect_left+0x4b6>
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <rainbow_effect_left+0x4ec>)
 800173e:	2200      	movs	r2, #0
 8001740:	801a      	strh	r2, [r3, #0]
 8001742:	2303      	movs	r3, #3
 8001744:	e006      	b.n	8001754 <rainbow_effect_left+0x4c4>
	  else effStep++;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <rainbow_effect_left+0x4ec>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <rainbow_effect_left+0x4ec>)
 8001750:	801a      	strh	r2, [r3, #0]
	  return 0x01;
 8001752:	2301      	movs	r3, #1
	}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800175e:	bf00      	nop
 8001760:	55555555 	.word	0x55555555
 8001764:	40215555 	.word	0x40215555
 8001768:	55555555 	.word	0x55555555
 800176c:	40115555 	.word	0x40115555
 8001770:	4ec4ec4f 	.word	0x4ec4ec4f
 8001774:	3ff00000 	.word	0x3ff00000
 8001778:	437f0000 	.word	0x437f0000
 800177c:	20000000 	.word	0x20000000

08001780 <rainbow_effect_right>:

static uint8_t rainbow_effect_right() {
 8001780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
	    // Colors: 3 (255.0.0, 0.255.0, 0.0.255)
	    // Options: rainbowlen=8, toLeft=false,
	//  if(millis() - strip_0.effStart < 30 * (strip_0.effStep)) return 0x00;
	  float factor1, factor2;
	  uint16_t ind;
	  for(uint16_t j=0;j<24;j++) {
 8001788:	2300      	movs	r3, #0
 800178a:	81fb      	strh	r3, [r7, #14]
 800178c:	e257      	b.n	8001c3e <rainbow_effect_right+0x4be>
	    ind = 14 - (int16_t)(effStep - j * 1.75) % 14;
 800178e:	4b78      	ldr	r3, [pc, #480]	; (8001970 <rainbow_effect_right+0x1f0>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fe2e 	bl	80003f4 <__aeabi_i2d>
 8001798:	4604      	mov	r4, r0
 800179a:	460d      	mov	r5, r1
 800179c:	89fb      	ldrh	r3, [r7, #14]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fe28 	bl	80003f4 <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b72      	ldr	r3, [pc, #456]	; (8001974 <rainbow_effect_right+0x1f4>)
 80017aa:	f7fe fe8d 	bl	80004c8 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4620      	mov	r0, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	f7fe fccf 	bl	8000158 <__aeabi_dsub>
 80017ba:	4603      	mov	r3, r0
 80017bc:	460c      	mov	r4, r1
 80017be:	4618      	mov	r0, r3
 80017c0:	4621      	mov	r1, r4
 80017c2:	f7ff f91b 	bl	80009fc <__aeabi_d2iz>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <rainbow_effect_right+0x1f8>)
 80017cc:	fb83 1302 	smull	r1, r3, r3, r2
 80017d0:	4413      	add	r3, r2
 80017d2:	10d9      	asrs	r1, r3, #3
 80017d4:	17d3      	asrs	r3, r2, #31
 80017d6:	1ac9      	subs	r1, r1, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a5b      	subs	r3, r3, r1
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f1c3 030e 	rsb	r3, r3, #14
 80017ea:	81bb      	strh	r3, [r7, #12]
	    switch((int)((ind % 14) / 4.666666666666667)) {
 80017ec:	89ba      	ldrh	r2, [r7, #12]
 80017ee:	0853      	lsrs	r3, r2, #1
 80017f0:	4961      	ldr	r1, [pc, #388]	; (8001978 <rainbow_effect_right+0x1f8>)
 80017f2:	fba1 1303 	umull	r1, r3, r1, r3
 80017f6:	0899      	lsrs	r1, r3, #2
 80017f8:	460b      	mov	r3, r1
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	1a5b      	subs	r3, r3, r1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fdf5 	bl	80003f4 <__aeabi_i2d>
 800180a:	a357      	add	r3, pc, #348	; (adr r3, 8001968 <rainbow_effect_right+0x1e8>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe ff84 	bl	800071c <__aeabi_ddiv>
 8001814:	4603      	mov	r3, r0
 8001816:	460c      	mov	r4, r1
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	f7ff f8ee 	bl	80009fc <__aeabi_d2iz>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	f000 80ae 	beq.w	8001984 <rainbow_effect_right+0x204>
 8001828:	2b02      	cmp	r3, #2
 800182a:	f000 8158 	beq.w	8001ade <rainbow_effect_right+0x35e>
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 8202 	bne.w	8001c38 <rainbow_effect_right+0x4b8>
	      case 0: factor1 = 1.0 - ((float)(ind % 14 - 0 * 4.666666666666667) / 4.666666666666667);
 8001834:	89ba      	ldrh	r2, [r7, #12]
 8001836:	0853      	lsrs	r3, r2, #1
 8001838:	494f      	ldr	r1, [pc, #316]	; (8001978 <rainbow_effect_right+0x1f8>)
 800183a:	fba1 1303 	umull	r1, r3, r1, r3
 800183e:	0899      	lsrs	r1, r3, #2
 8001840:	460b      	mov	r3, r1
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	1a5b      	subs	r3, r3, r1
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fdd1 	bl	80003f4 <__aeabi_i2d>
 8001852:	4603      	mov	r3, r0
 8001854:	460c      	mov	r4, r1
 8001856:	4618      	mov	r0, r3
 8001858:	4621      	mov	r1, r4
 800185a:	f7ff f917 	bl	8000a8c <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fdd9 	bl	8000418 <__aeabi_f2d>
 8001866:	a340      	add	r3, pc, #256	; (adr r3, 8001968 <rainbow_effect_right+0x1e8>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe ff56 	bl	800071c <__aeabi_ddiv>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	461a      	mov	r2, r3
 8001876:	4623      	mov	r3, r4
 8001878:	f04f 0000 	mov.w	r0, #0
 800187c:	493f      	ldr	r1, [pc, #252]	; (800197c <rainbow_effect_right+0x1fc>)
 800187e:	f7fe fc6b 	bl	8000158 <__aeabi_dsub>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	4618      	mov	r0, r3
 8001888:	4621      	mov	r1, r4
 800188a:	f7ff f8ff 	bl	8000a8c <__aeabi_d2f>
 800188e:	4603      	mov	r3, r0
 8001890:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 0) % 14) / 4.666666666666667;
 8001892:	89ba      	ldrh	r2, [r7, #12]
 8001894:	4b38      	ldr	r3, [pc, #224]	; (8001978 <rainbow_effect_right+0x1f8>)
 8001896:	fb83 1302 	smull	r1, r3, r3, r2
 800189a:	4413      	add	r3, r2
 800189c:	10d9      	asrs	r1, r3, #3
 800189e:	17d3      	asrs	r3, r2, #31
 80018a0:	1ac9      	subs	r1, r1, r3
 80018a2:	460b      	mov	r3, r1
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	1a5b      	subs	r3, r3, r1
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	1ad1      	subs	r1, r2, r3
 80018ac:	4608      	mov	r0, r1
 80018ae:	f7ff f9f7 	bl	8000ca0 <__aeabi_i2f>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fdaf 	bl	8000418 <__aeabi_f2d>
 80018ba:	a32b      	add	r3, pc, #172	; (adr r3, 8001968 <rainbow_effect_right+0x1e8>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe ff2c 	bl	800071c <__aeabi_ddiv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	4618      	mov	r0, r3
 80018ca:	4621      	mov	r1, r4
 80018cc:	f7ff f8de 	bl	8000a8c <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2);
 80018d4:	89fc      	ldrh	r4, [r7, #14]
 80018d6:	492a      	ldr	r1, [pc, #168]	; (8001980 <rainbow_effect_right+0x200>)
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	f7ff fa35 	bl	8000d48 <__aeabi_fmul>
 80018de:	4603      	mov	r3, r0
 80018e0:	461d      	mov	r5, r3
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fa2e 	bl	8000d48 <__aeabi_fmul>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4619      	mov	r1, r3
 80018f0:	4628      	mov	r0, r5
 80018f2:	f7ff f921 	bl	8000b38 <__addsf3>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fb75 	bl	8000fe8 <__aeabi_f2iz>
 80018fe:	4605      	mov	r5, r0
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	68b8      	ldr	r0, [r7, #8]
 8001906:	f7ff fa1f 	bl	8000d48 <__aeabi_fmul>
 800190a:	4603      	mov	r3, r0
 800190c:	461e      	mov	r6, r3
 800190e:	491c      	ldr	r1, [pc, #112]	; (8001980 <rainbow_effect_right+0x200>)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fa19 	bl	8000d48 <__aeabi_fmul>
 8001916:	4603      	mov	r3, r0
 8001918:	4619      	mov	r1, r3
 800191a:	4630      	mov	r0, r6
 800191c:	f7ff f90c 	bl	8000b38 <__addsf3>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fb60 	bl	8000fe8 <__aeabi_f2iz>
 8001928:	4606      	mov	r6, r0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff fa0a 	bl	8000d48 <__aeabi_fmul>
 8001934:	4603      	mov	r3, r0
 8001936:	4698      	mov	r8, r3
 8001938:	f04f 0100 	mov.w	r1, #0
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fa03 	bl	8000d48 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	4619      	mov	r1, r3
 8001946:	4640      	mov	r0, r8
 8001948:	f7ff f8f6 	bl	8000b38 <__addsf3>
 800194c:	4603      	mov	r3, r0
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fb4a 	bl	8000fe8 <__aeabi_f2iz>
 8001954:	4603      	mov	r3, r0
 8001956:	4632      	mov	r2, r6
 8001958:	4629      	mov	r1, r5
 800195a:	4620      	mov	r0, r4
 800195c:	f7ff fb7e 	bl	800105c <Set_LED>
	              WS2812_Send();
 8001960:	f7ff fc28 	bl	80011b4 <WS2812_Send>
	              break;
 8001964:	e168      	b.n	8001c38 <rainbow_effect_right+0x4b8>
 8001966:	bf00      	nop
 8001968:	aaaaaaab 	.word	0xaaaaaaab
 800196c:	4012aaaa 	.word	0x4012aaaa
 8001970:	20000000 	.word	0x20000000
 8001974:	3ffc0000 	.word	0x3ffc0000
 8001978:	92492493 	.word	0x92492493
 800197c:	3ff00000 	.word	0x3ff00000
 8001980:	437f0000 	.word	0x437f0000
	    	  	              factor2 = (float)((int)(ind - 9.333333333333334) % 14) / 4.666666666666667;
	    	  	              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
	    	  	              WS2812_Send();
	    	  	              break;

	      case 1: factor1 = 1.0 - ((float)(ind % 14 - 1 * 4.666666666666667) / 4.666666666666667);
 8001984:	89ba      	ldrh	r2, [r7, #12]
 8001986:	0853      	lsrs	r3, r2, #1
 8001988:	49bd      	ldr	r1, [pc, #756]	; (8001c80 <rainbow_effect_right+0x500>)
 800198a:	fba1 1303 	umull	r1, r3, r1, r3
 800198e:	0899      	lsrs	r1, r3, #2
 8001990:	460b      	mov	r3, r1
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a5b      	subs	r3, r3, r1
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd29 	bl	80003f4 <__aeabi_i2d>
 80019a2:	a3b3      	add	r3, pc, #716	; (adr r3, 8001c70 <rainbow_effect_right+0x4f0>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fbd6 	bl	8000158 <__aeabi_dsub>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	4618      	mov	r0, r3
 80019b2:	4621      	mov	r1, r4
 80019b4:	f7ff f86a 	bl	8000a8c <__aeabi_d2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fd2c 	bl	8000418 <__aeabi_f2d>
 80019c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8001c70 <rainbow_effect_right+0x4f0>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fea9 	bl	800071c <__aeabi_ddiv>
 80019ca:	4603      	mov	r3, r0
 80019cc:	460c      	mov	r4, r1
 80019ce:	461a      	mov	r2, r3
 80019d0:	4623      	mov	r3, r4
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	49ab      	ldr	r1, [pc, #684]	; (8001c84 <rainbow_effect_right+0x504>)
 80019d8:	f7fe fbbe 	bl	8000158 <__aeabi_dsub>
 80019dc:	4603      	mov	r3, r0
 80019de:	460c      	mov	r4, r1
 80019e0:	4618      	mov	r0, r3
 80019e2:	4621      	mov	r1, r4
 80019e4:	f7ff f852 	bl	8000a8c <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 4.666666666666667) % 14) / 4.666666666666667;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fd00 	bl	80003f4 <__aeabi_i2d>
 80019f4:	a39e      	add	r3, pc, #632	; (adr r3, 8001c70 <rainbow_effect_right+0x4f0>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fbad 	bl	8000158 <__aeabi_dsub>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	4618      	mov	r0, r3
 8001a04:	4621      	mov	r1, r4
 8001a06:	f7fe fff9 	bl	80009fc <__aeabi_d2iz>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b9c      	ldr	r3, [pc, #624]	; (8001c80 <rainbow_effect_right+0x500>)
 8001a0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a12:	4413      	add	r3, r2
 8001a14:	10d9      	asrs	r1, r3, #3
 8001a16:	17d3      	asrs	r3, r2, #31
 8001a18:	1ac9      	subs	r1, r1, r3
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a5b      	subs	r3, r3, r1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	1ad1      	subs	r1, r2, r3
 8001a24:	4608      	mov	r0, r1
 8001a26:	f7ff f93b 	bl	8000ca0 <__aeabi_i2f>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fcf3 	bl	8000418 <__aeabi_f2d>
 8001a32:	a38f      	add	r3, pc, #572	; (adr r3, 8001c70 <rainbow_effect_right+0x4f0>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fe70 	bl	800071c <__aeabi_ddiv>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	4618      	mov	r0, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	f7ff f822 	bl	8000a8c <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2, 0 * factor1 + 255 * factor2);
 8001a4c:	89fc      	ldrh	r4, [r7, #14]
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	68b8      	ldr	r0, [r7, #8]
 8001a54:	f7ff f978 	bl	8000d48 <__aeabi_fmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff f971 	bl	8000d48 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7ff f864 	bl	8000b38 <__addsf3>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fab8 	bl	8000fe8 <__aeabi_f2iz>
 8001a78:	4605      	mov	r5, r0
 8001a7a:	4983      	ldr	r1, [pc, #524]	; (8001c88 <rainbow_effect_right+0x508>)
 8001a7c:	68b8      	ldr	r0, [r7, #8]
 8001a7e:	f7ff f963 	bl	8000d48 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461e      	mov	r6, r3
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f95c 	bl	8000d48 <__aeabi_fmul>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4630      	mov	r0, r6
 8001a96:	f7ff f84f 	bl	8000b38 <__addsf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff faa3 	bl	8000fe8 <__aeabi_f2iz>
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	68b8      	ldr	r0, [r7, #8]
 8001aaa:	f7ff f94d 	bl	8000d48 <__aeabi_fmul>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	4975      	ldr	r1, [pc, #468]	; (8001c88 <rainbow_effect_right+0x508>)
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff f947 	bl	8000d48 <__aeabi_fmul>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4619      	mov	r1, r3
 8001abe:	4640      	mov	r0, r8
 8001ac0:	f7ff f83a 	bl	8000b38 <__addsf3>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fa8e 	bl	8000fe8 <__aeabi_f2iz>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4632      	mov	r2, r6
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff fac2 	bl	800105c <Set_LED>
	              WS2812_Send();
 8001ad8:	f7ff fb6c 	bl	80011b4 <WS2812_Send>
	              break;
 8001adc:	e0ac      	b.n	8001c38 <rainbow_effect_right+0x4b8>
	      case 2: factor1 = 1.0 - ((float)(ind % 14 - 2 * 4.666666666666667) / 4.666666666666667);
 8001ade:	89ba      	ldrh	r2, [r7, #12]
 8001ae0:	0853      	lsrs	r3, r2, #1
 8001ae2:	4967      	ldr	r1, [pc, #412]	; (8001c80 <rainbow_effect_right+0x500>)
 8001ae4:	fba1 1303 	umull	r1, r3, r1, r3
 8001ae8:	0899      	lsrs	r1, r3, #2
 8001aea:	460b      	mov	r3, r1
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	1a5b      	subs	r3, r3, r1
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fc7c 	bl	80003f4 <__aeabi_i2d>
 8001afc:	a35e      	add	r3, pc, #376	; (adr r3, 8001c78 <rainbow_effect_right+0x4f8>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fb29 	bl	8000158 <__aeabi_dsub>
 8001b06:	4603      	mov	r3, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	f7fe ffbd 	bl	8000a8c <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fc7f 	bl	8000418 <__aeabi_f2d>
 8001b1a:	a355      	add	r3, pc, #340	; (adr r3, 8001c70 <rainbow_effect_right+0x4f0>)
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	f7fe fdfc 	bl	800071c <__aeabi_ddiv>
 8001b24:	4603      	mov	r3, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	4954      	ldr	r1, [pc, #336]	; (8001c84 <rainbow_effect_right+0x504>)
 8001b32:	f7fe fb11 	bl	8000158 <__aeabi_dsub>
 8001b36:	4603      	mov	r3, r0
 8001b38:	460c      	mov	r4, r1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	f7fe ffa5 	bl	8000a8c <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	60bb      	str	r3, [r7, #8]
	              factor2 = (float)((int)(ind - 9.333333333333334) % 14) / 4.666666666666667;
 8001b46:	89bb      	ldrh	r3, [r7, #12]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fc53 	bl	80003f4 <__aeabi_i2d>
 8001b4e:	a34a      	add	r3, pc, #296	; (adr r3, 8001c78 <rainbow_effect_right+0x4f8>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fb00 	bl	8000158 <__aeabi_dsub>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4621      	mov	r1, r4
 8001b60:	f7fe ff4c 	bl	80009fc <__aeabi_d2iz>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <rainbow_effect_right+0x500>)
 8001b68:	fb83 1302 	smull	r1, r3, r3, r2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	10d9      	asrs	r1, r3, #3
 8001b70:	17d3      	asrs	r3, r2, #31
 8001b72:	1ac9      	subs	r1, r1, r3
 8001b74:	460b      	mov	r3, r1
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	1a5b      	subs	r3, r3, r1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	1ad1      	subs	r1, r2, r3
 8001b7e:	4608      	mov	r0, r1
 8001b80:	f7ff f88e 	bl	8000ca0 <__aeabi_i2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc46 	bl	8000418 <__aeabi_f2d>
 8001b8c:	a338      	add	r3, pc, #224	; (adr r3, 8001c70 <rainbow_effect_right+0x4f0>)
 8001b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b92:	f7fe fdc3 	bl	800071c <__aeabi_ddiv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	460c      	mov	r4, r1
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	f7fe ff75 	bl	8000a8c <__aeabi_d2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	607b      	str	r3, [r7, #4]
	              Set_LED(j, 0 * factor1 + 255 * factor2, 0 * factor1 + 0 * factor2, 255 * factor1 + 0 * factor2);
 8001ba6:	89fc      	ldrh	r4, [r7, #14]
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	68b8      	ldr	r0, [r7, #8]
 8001bae:	f7ff f8cb 	bl	8000d48 <__aeabi_fmul>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	4934      	ldr	r1, [pc, #208]	; (8001c88 <rainbow_effect_right+0x508>)
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff f8c5 	bl	8000d48 <__aeabi_fmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7fe ffb8 	bl	8000b38 <__addsf3>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fa0c 	bl	8000fe8 <__aeabi_f2iz>
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	68b8      	ldr	r0, [r7, #8]
 8001bd8:	f7ff f8b6 	bl	8000d48 <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461e      	mov	r6, r3
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff f8af 	bl	8000d48 <__aeabi_fmul>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4619      	mov	r1, r3
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7fe ffa2 	bl	8000b38 <__addsf3>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f9f6 	bl	8000fe8 <__aeabi_f2iz>
 8001bfc:	4606      	mov	r6, r0
 8001bfe:	4922      	ldr	r1, [pc, #136]	; (8001c88 <rainbow_effect_right+0x508>)
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f7ff f8a1 	bl	8000d48 <__aeabi_fmul>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4698      	mov	r8, r3
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff f89a 	bl	8000d48 <__aeabi_fmul>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4640      	mov	r0, r8
 8001c1a:	f7fe ff8d 	bl	8000b38 <__addsf3>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff f9e1 	bl	8000fe8 <__aeabi_f2iz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4632      	mov	r2, r6
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff fa15 	bl	800105c <Set_LED>
	              WS2812_Send();
 8001c32:	f7ff fabf 	bl	80011b4 <WS2812_Send>
	              break;
 8001c36:	bf00      	nop
	  for(uint16_t j=0;j<24;j++) {
 8001c38:	89fb      	ldrh	r3, [r7, #14]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	81fb      	strh	r3, [r7, #14]
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	2b17      	cmp	r3, #23
 8001c42:	f67f ada4 	bls.w	800178e <rainbow_effect_right+0xe>
	    }
	  }
	  if(effStep >= 14) {effStep = 0; return 0x03; }
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <rainbow_effect_right+0x50c>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	2b0d      	cmp	r3, #13
 8001c4c:	d904      	bls.n	8001c58 <rainbow_effect_right+0x4d8>
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <rainbow_effect_right+0x50c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	801a      	strh	r2, [r3, #0]
 8001c54:	2303      	movs	r3, #3
 8001c56:	e006      	b.n	8001c66 <rainbow_effect_right+0x4e6>
	  else effStep++;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <rainbow_effect_right+0x50c>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <rainbow_effect_right+0x50c>)
 8001c62:	801a      	strh	r2, [r3, #0]
	  return 0x01;
 8001c64:	2301      	movs	r3, #1
	}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c70:	aaaaaaab 	.word	0xaaaaaaab
 8001c74:	4012aaaa 	.word	0x4012aaaa
 8001c78:	aaaaaaab 	.word	0xaaaaaaab
 8001c7c:	4022aaaa 	.word	0x4022aaaa
 8001c80:	92492493 	.word	0x92492493
 8001c84:	3ff00000 	.word	0x3ff00000
 8001c88:	437f0000 	.word	0x437f0000
 8001c8c:	20000000 	.word	0x20000000

08001c90 <white_effect>:

static void white_effect (void){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
		for(uint8_t j=0;j<24;j++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	e00a      	b.n	8001cb2 <white_effect+0x22>
		  Set_LED(j, 255, 255, 255);
 8001c9c:	79f8      	ldrb	r0, [r7, #7]
 8001c9e:	23ff      	movs	r3, #255	; 0xff
 8001ca0:	22ff      	movs	r2, #255	; 0xff
 8001ca2:	21ff      	movs	r1, #255	; 0xff
 8001ca4:	f7ff f9da 	bl	800105c <Set_LED>
		  WS2812_Send();
 8001ca8:	f7ff fa84 	bl	80011b4 <WS2812_Send>
		for(uint8_t j=0;j<24;j++) {
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	2b17      	cmp	r3, #23
 8001cb6:	d9f1      	bls.n	8001c9c <white_effect+0xc>
		}
	}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_UARTEx_RxEventCallback>:



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <HAL_UARTEx_RxEventCallback+0x90>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d119      	bne.n	8001d0a <HAL_UARTEx_RxEventCallback+0x4a>
	{
		Rx_val = 0;
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <HAL_UARTEx_RxEventCallback+0x94>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	801a      	strh	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf, RxBuf_SIZE);
 8001cdc:	2206      	movs	r2, #6
 8001cde:	491e      	ldr	r1, [pc, #120]	; (8001d58 <HAL_UARTEx_RxEventCallback+0x98>)
 8001ce0:	481e      	ldr	r0, [pc, #120]	; (8001d5c <HAL_UARTEx_RxEventCallback+0x9c>)
 8001ce2:	f002 fbf0 	bl	80044c6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0204 	bic.w	r2, r2, #4
 8001cf4:	601a      	str	r2, [r3, #0]
		//copy RxBuf to MainBuf (array type)
		memcpy (MainBuf, RxBuf,MainBuf_SIZE+1);
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	4917      	ldr	r1, [pc, #92]	; (8001d58 <HAL_UARTEx_RxEventCallback+0x98>)
 8001cfa:	481a      	ldr	r0, [pc, #104]	; (8001d64 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001cfc:	f003 f92e 	bl	8004f5c <memcpy>
		memset(RxBuf,0,6);//Delete RxBuf
 8001d00:	2206      	movs	r2, #6
 8001d02:	2100      	movs	r1, #0
 8001d04:	4814      	ldr	r0, [pc, #80]	; (8001d58 <HAL_UARTEx_RxEventCallback+0x98>)
 8001d06:	f003 f934 	bl	8004f72 <memset>

	}
	// converting string to integer
	for (int i = 1; MainBuf[i] != '\0'; i++)
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e014      	b.n	8001d3a <HAL_UARTEx_RxEventCallback+0x7a>
	{
		Rx_val = Rx_val * 10 + (MainBuf[i] - 48);
 8001d10:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_UARTEx_RxEventCallback+0x94>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4911      	ldr	r1, [pc, #68]	; (8001d64 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	440b      	add	r3, r1
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b30      	subs	r3, #48	; 0x30
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_UARTEx_RxEventCallback+0x94>)
 8001d32:	801a      	strh	r2, [r3, #0]
	for (int i = 1; MainBuf[i] != '\0'; i++)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4413      	add	r3, r2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1e4      	bne.n	8001d10 <HAL_UARTEx_RxEventCallback+0x50>
	}


}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40013800 	.word	0x40013800
 8001d54:	20000030 	.word	0x20000030
 8001d58:	200007ac 	.word	0x200007ac
 8001d5c:	20000724 	.word	0x20000724
 8001d60:	200006e0 	.word	0x200006e0
 8001d64:	200007b4 	.word	0x200007b4

08001d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d6c:	f000 fb24 	bl	80023b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d70:	f000 f840 	bl	8001df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d74:	f000 f92c 	bl	8001fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d78:	f000 f904 	bl	8001f84 <MX_DMA_Init>
  MX_TIM3_Init();
 8001d7c:	f000 f880 	bl	8001e80 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d80:	f000 f8d6 	bl	8001f30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf, RxBuf_SIZE);
 8001d84:	2206      	movs	r2, #6
 8001d86:	4916      	ldr	r1, [pc, #88]	; (8001de0 <main+0x78>)
 8001d88:	4816      	ldr	r0, [pc, #88]	; (8001de4 <main+0x7c>)
 8001d8a:	f002 fb9c 	bl	80044c6 <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <main+0x80>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <main+0x80>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0204 	bic.w	r2, r2, #4
 8001d9c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(*MainBuf){
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <main+0x84>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b42      	cmp	r3, #66	; 0x42
 8001da4:	d00b      	beq.n	8001dbe <main+0x56>
 8001da6:	2b43      	cmp	r3, #67	; 0x43
 8001da8:	d011      	beq.n	8001dce <main+0x66>
 8001daa:	2b41      	cmp	r3, #65	; 0x41
 8001dac:	d1f7      	bne.n	8001d9e <main+0x36>
	 	 	  case 'A':
	 	 	  rainbow_effect_left();
 8001dae:	f7ff fa6f 	bl	8001290 <rainbow_effect_left>
	 	 	  //val = Rx_val;
	 	 	  Set_Brightness(Rx_val);
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <main+0x88>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f97e 	bl	80010b8 <Set_Brightness>
	 	 	  //HAL_Delay(1);
	 	 	  break;
 8001dbc:	e00f      	b.n	8001dde <main+0x76>
	 	 	  case 'B':
	 	 	  rainbow_effect_right();
 8001dbe:	f7ff fcdf 	bl	8001780 <rainbow_effect_right>
	 	 	  //val = Rx_val;
	 	 	  Set_Brightness(Rx_val);
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <main+0x88>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f976 	bl	80010b8 <Set_Brightness>
	 	 	  //HAL_Delay(1);
	 	 	  break;
 8001dcc:	e007      	b.n	8001dde <main+0x76>
	 	 	  case 'C':
	 	 	  white_effect();
 8001dce:	f7ff ff5f 	bl	8001c90 <white_effect>
	 	 	  //val = Rx_val;
	 	 	  Set_Brightness(Rx_val);
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <main+0x88>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f96e 	bl	80010b8 <Set_Brightness>
	 	 	  //HAL_Delay(1);

	 	 	  break;
 8001ddc:	bf00      	nop
	  switch(*MainBuf){
 8001dde:	e7de      	b.n	8001d9e <main+0x36>
 8001de0:	200007ac 	.word	0x200007ac
 8001de4:	20000724 	.word	0x20000724
 8001de8:	200006e0 	.word	0x200006e0
 8001dec:	200007b4 	.word	0x200007b4
 8001df0:	20000030 	.word	0x20000030

08001df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b090      	sub	sp, #64	; 0x40
 8001df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfa:	f107 0318 	add.w	r3, r7, #24
 8001dfe:	2228      	movs	r2, #40	; 0x28
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f003 f8b5 	bl	8004f72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e24:	2301      	movs	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 f823 	bl	8002e88 <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e48:	f000 f8fc 	bl	8002044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	2302      	movs	r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2102      	movs	r1, #2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 fa8e 	bl	8003388 <HAL_RCC_ClockConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e72:	f000 f8e7 	bl	8002044 <Error_Handler>
  }
}
 8001e76:	bf00      	nop
 8001e78:	3740      	adds	r7, #64	; 0x40
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e86:	f107 0320 	add.w	r3, r7, #32
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001ea4:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <MX_TIM3_Init+0xac>)
 8001ea6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001eb6:	2259      	movs	r2, #89	; 0x59
 8001eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ec6:	4818      	ldr	r0, [pc, #96]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001ec8:	f001 fbfa 	bl	80036c0 <HAL_TIM_PWM_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001ed2:	f000 f8b7 	bl	8002044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ede:	f107 0320 	add.w	r3, r7, #32
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4810      	ldr	r0, [pc, #64]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001ee6:	f002 fa43 	bl	8004370 <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001ef0:	f000 f8a8 	bl	8002044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef4:	2360      	movs	r3, #96	; 0x60
 8001ef6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4807      	ldr	r0, [pc, #28]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001f0c:	f001 fe80 	bl	8003c10 <HAL_TIM_PWM_ConfigChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f16:	f000 f895 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f1a:	4803      	ldr	r0, [pc, #12]	; (8001f28 <MX_TIM3_Init+0xa8>)
 8001f1c:	f000 f91a 	bl	8002154 <HAL_TIM_MspPostInit>

}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200001b4 	.word	0x200001b4
 8001f2c:	40000400 	.word	0x40000400

08001f30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MX_USART1_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f68:	f002 fa60 	bl	800442c <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f72:	f000 f867 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000724 	.word	0x20000724
 8001f80:	40013800 	.word	0x40013800

08001f84 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_DMA_Init+0x48>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <MX_DMA_Init+0x48>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6153      	str	r3, [r2, #20]
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <MX_DMA_Init+0x48>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	200f      	movs	r0, #15
 8001fa8:	f000 fb3f 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001fac:	200f      	movs	r0, #15
 8001fae:	f000 fb58 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2010      	movs	r0, #16
 8001fb8:	f000 fb37 	bl	800262a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001fbc:	2010      	movs	r0, #16
 8001fbe:	f000 fb50 	bl	8002662 <HAL_NVIC_EnableIRQ>

}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <MX_GPIO_Init+0x70>)
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <MX_GPIO_Init+0x70>)
 8001fdc:	f043 0310 	orr.w	r3, r3, #16
 8001fe0:	6193      	str	r3, [r2, #24]
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_GPIO_Init+0x70>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <MX_GPIO_Init+0x70>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <MX_GPIO_Init+0x70>)
 8001ff4:	f043 0320 	orr.w	r3, r3, #32
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_GPIO_Init+0x70>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_GPIO_Init+0x70>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <MX_GPIO_Init+0x70>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6193      	str	r3, [r2, #24]
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <MX_GPIO_Init+0x70>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MX_GPIO_Init+0x70>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a07      	ldr	r2, [pc, #28]	; (8002040 <MX_GPIO_Init+0x70>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <MX_GPIO_Init+0x70>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_MspInit+0x5c>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_MspInit+0x5c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6193      	str	r3, [r2, #24]
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_MspInit+0x5c>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_MspInit+0x5c>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <HAL_MspInit+0x5c>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <HAL_MspInit+0x5c>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_MspInit+0x60>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_MspInit+0x60>)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000

080020b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a20      	ldr	r2, [pc, #128]	; (8002144 <HAL_TIM_PWM_MspInit+0x90>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d139      	bne.n	800213a <HAL_TIM_PWM_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_TIM_PWM_MspInit+0x94>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_TIM_PWM_MspInit+0x94>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_TIM_PWM_MspInit+0x94>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80020de:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_TIM_PWM_MspInit+0x9c>)
 80020e2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 80020e6:	2210      	movs	r2, #16
 80020e8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 80020f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 8002100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002104:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 800210e:	2200      	movs	r2, #0
 8002110:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002112:	480e      	ldr	r0, [pc, #56]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 8002114:	f000 fac0 	bl	8002698 <HAL_DMA_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_TIM_PWM_MspInit+0x6e>
    {
      Error_Handler();
 800211e:	f7ff ff91 	bl	8002044 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 8002126:	625a      	str	r2, [r3, #36]	; 0x24
 8002128:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <HAL_TIM_PWM_MspInit+0x98>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40000400 	.word	0x40000400
 8002148:	40021000 	.word	0x40021000
 800214c:	20000768 	.word	0x20000768
 8002150:	4002006c 	.word	0x4002006c

08002154 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <HAL_TIM_MspPostInit+0x58>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d117      	bne.n	80021a4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_TIM_MspPostInit+0x5c>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_TIM_MspPostInit+0x5c>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_TIM_MspPostInit+0x5c>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800218c:	2340      	movs	r3, #64	; 0x40
 800218e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2302      	movs	r3, #2
 8002196:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	4619      	mov	r1, r3
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <HAL_TIM_MspPostInit+0x60>)
 80021a0:	f000 fd18 	bl	8002bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010800 	.word	0x40010800

080021b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <HAL_UART_MspInit+0x100>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d16b      	bne.n	80022b0 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_UART_MspInit+0x104>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a37      	ldr	r2, [pc, #220]	; (80022bc <HAL_UART_MspInit+0x104>)
 80021de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_UART_MspInit+0x104>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f0:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_UART_MspInit+0x104>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a31      	ldr	r2, [pc, #196]	; (80022bc <HAL_UART_MspInit+0x104>)
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_UART_MspInit+0x104>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002208:	2340      	movs	r3, #64	; 0x40
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	4619      	mov	r1, r3
 800221a:	4829      	ldr	r0, [pc, #164]	; (80022c0 <HAL_UART_MspInit+0x108>)
 800221c:	f000 fcda 	bl	8002bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4823      	ldr	r0, [pc, #140]	; (80022c0 <HAL_UART_MspInit+0x108>)
 8002234:	f000 fcce 	bl	8002bd4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002238:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <HAL_UART_MspInit+0x10c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_UART_MspInit+0x10c>)
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_UART_MspInit+0x110>)
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_UART_MspInit+0x114>)
 8002258:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_UART_MspInit+0x110>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_UART_MspInit+0x110>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_UART_MspInit+0x110>)
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_UART_MspInit+0x110>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_UART_MspInit+0x110>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_UART_MspInit+0x110>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_UART_MspInit+0x110>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002284:	4810      	ldr	r0, [pc, #64]	; (80022c8 <HAL_UART_MspInit+0x110>)
 8002286:	f000 fa07 	bl	8002698 <HAL_DMA_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 8002290:	f7ff fed8 	bl	8002044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a0c      	ldr	r2, [pc, #48]	; (80022c8 <HAL_UART_MspInit+0x110>)
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <HAL_UART_MspInit+0x110>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	2025      	movs	r0, #37	; 0x25
 80022a6:	f000 f9c0 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022aa:	2025      	movs	r0, #37	; 0x25
 80022ac:	f000 f9d9 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40013800 	.word	0x40013800
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010c00 	.word	0x40010c00
 80022c4:	40010000 	.word	0x40010000
 80022c8:	200006e0 	.word	0x200006e0
 80022cc:	40020058 	.word	0x40020058

080022d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <HardFault_Handler+0x4>

080022e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <MemManage_Handler+0x4>

080022e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <BusFault_Handler+0x4>

080022ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f2:	e7fe      	b.n	80022f2 <UsageFault_Handler+0x4>

080022f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231c:	f000 f892 	bl	8002444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}

08002324 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <DMA1_Channel5_IRQHandler+0x10>)
 800232a:	f000 fb1f 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200006e0 	.word	0x200006e0

08002338 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <DMA1_Channel6_IRQHandler+0x10>)
 800233e:	f000 fb15 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000768 	.word	0x20000768

0800234c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <USART1_IRQHandler+0x10>)
 8002352:	f002 f907 	bl	8004564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000724 	.word	0x20000724

08002360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	; (80023a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	; (80023b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002392:	f7ff ffe5 	bl	8002360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002396:	f002 fdbd 	bl	8004f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800239a:	f7ff fce5 	bl	8001d68 <main>
  bx lr
 800239e:	4770      	bx	lr
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80023a8:	080061f8 	.word	0x080061f8
  ldr r2, =_sbss
 80023ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80023b0:	200007c0 	.word	0x200007c0

080023b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_2_IRQHandler>
	...

080023b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <HAL_Init+0x28>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_Init+0x28>)
 80023c2:	f043 0310 	orr.w	r3, r3, #16
 80023c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c8:	2003      	movs	r0, #3
 80023ca:	f000 f923 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f000 f808 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d4:	f7ff fe3c 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000

080023e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x54>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_InitTick+0x58>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f93b 	bl	800267e <HAL_SYSTICK_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e00e      	b.n	8002430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d80a      	bhi.n	800242e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002418:	2200      	movs	r2, #0
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f000 f903 	bl	800262a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_InitTick+0x5c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000004 	.word	0x20000004
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000008 	.word	0x20000008

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_IncTick+0x1c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_IncTick+0x20>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_IncTick+0x20>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	2000000c 	.word	0x2000000c
 8002464:	200007bc 	.word	0x200007bc

08002468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <HAL_GetTick+0x10>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	200007bc 	.word	0x200007bc

0800247c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <__NVIC_SetPriorityGrouping+0x44>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <__NVIC_GetPriorityGrouping+0x18>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	f003 0307 	and.w	r3, r3, #7
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db0b      	blt.n	800250a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	f003 021f 	and.w	r2, r3, #31
 80024f8:	4906      	ldr	r1, [pc, #24]	; (8002514 <__NVIC_EnableIRQ+0x34>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	2001      	movs	r0, #1
 8002502:	fa00 f202 	lsl.w	r2, r0, r2
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025e0:	d301      	bcc.n	80025e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00f      	b.n	8002606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e6:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <SysTick_Config+0x40>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ee:	210f      	movs	r1, #15
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f7ff ff90 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <SysTick_Config+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <SysTick_Config+0x40>)
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff2d 	bl	800247c <__NVIC_SetPriorityGrouping>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800263c:	f7ff ff42 	bl	80024c4 <__NVIC_GetPriorityGrouping>
 8002640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	6978      	ldr	r0, [r7, #20]
 8002648:	f7ff ff90 	bl	800256c <NVIC_EncodePriority>
 800264c:	4602      	mov	r2, r0
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5f 	bl	8002518 <__NVIC_SetPriority>
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff35 	bl	80024e0 <__NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffa2 	bl	80025d0 <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e043      	b.n	8002736 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_DMA_Init+0xa8>)
 80026b6:	4413      	add	r3, r2
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_DMA_Init+0xac>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	009a      	lsls	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_DMA_Init+0xb0>)
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	bffdfff8 	.word	0xbffdfff8
 8002744:	cccccccd 	.word	0xcccccccd
 8002748:	40020000 	.word	0x40020000

0800274c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_DMA_Start_IT+0x20>
 8002768:	2302      	movs	r3, #2
 800276a:	e04a      	b.n	8002802 <HAL_DMA_Start_IT+0xb6>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800277a:	2b01      	cmp	r3, #1
 800277c:	d13a      	bne.n	80027f4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f9e8 	bl	8002b78 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 020e 	orr.w	r2, r2, #14
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e00f      	b.n	80027e2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0204 	bic.w	r2, r2, #4
 80027d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 020a 	orr.w	r2, r2, #10
 80027e0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e005      	b.n	8002800 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
 80027fe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002800:	7dfb      	ldrb	r3, [r7, #23]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800281c:	2b02      	cmp	r3, #2
 800281e:	d008      	beq.n	8002832 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2204      	movs	r2, #4
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e020      	b.n	8002874 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 020e 	bic.w	r2, r2, #14
 8002840:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002892:	2b02      	cmp	r3, #2
 8002894:	d005      	beq.n	80028a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e051      	b.n	8002946 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 020e 	bic.w	r2, r2, #14
 80028b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0201 	bic.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_DMA_Abort_IT+0xd0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d029      	beq.n	8002920 <HAL_DMA_Abort_IT+0xa0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_DMA_Abort_IT+0xd4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d022      	beq.n	800291c <HAL_DMA_Abort_IT+0x9c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_DMA_Abort_IT+0xd8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d01a      	beq.n	8002916 <HAL_DMA_Abort_IT+0x96>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <HAL_DMA_Abort_IT+0xdc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d012      	beq.n	8002910 <HAL_DMA_Abort_IT+0x90>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <HAL_DMA_Abort_IT+0xe0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00a      	beq.n	800290a <HAL_DMA_Abort_IT+0x8a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <HAL_DMA_Abort_IT+0xe4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d102      	bne.n	8002904 <HAL_DMA_Abort_IT+0x84>
 80028fe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002902:	e00e      	b.n	8002922 <HAL_DMA_Abort_IT+0xa2>
 8002904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002908:	e00b      	b.n	8002922 <HAL_DMA_Abort_IT+0xa2>
 800290a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800290e:	e008      	b.n	8002922 <HAL_DMA_Abort_IT+0xa2>
 8002910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002914:	e005      	b.n	8002922 <HAL_DMA_Abort_IT+0xa2>
 8002916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291a:	e002      	b.n	8002922 <HAL_DMA_Abort_IT+0xa2>
 800291c:	2310      	movs	r3, #16
 800291e:	e000      	b.n	8002922 <HAL_DMA_Abort_IT+0xa2>
 8002920:	2301      	movs	r3, #1
 8002922:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_DMA_Abort_IT+0xe8>)
 8002924:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
    } 
  }
  return status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40020008 	.word	0x40020008
 8002954:	4002001c 	.word	0x4002001c
 8002958:	40020030 	.word	0x40020030
 800295c:	40020044 	.word	0x40020044
 8002960:	40020058 	.word	0x40020058
 8002964:	4002006c 	.word	0x4002006c
 8002968:	40020000 	.word	0x40020000

0800296c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2204      	movs	r2, #4
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d04f      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xc8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d04a      	beq.n	8002a34 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0204 	bic.w	r2, r2, #4
 80029ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a66      	ldr	r2, [pc, #408]	; (8002b5c <HAL_DMA_IRQHandler+0x1f0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d029      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xae>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a65      	ldr	r2, [pc, #404]	; (8002b60 <HAL_DMA_IRQHandler+0x1f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_IRQHandler+0xaa>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <HAL_DMA_IRQHandler+0x1f8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0xa4>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a62      	ldr	r2, [pc, #392]	; (8002b68 <HAL_DMA_IRQHandler+0x1fc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d012      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x9e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a60      	ldr	r2, [pc, #384]	; (8002b6c <HAL_DMA_IRQHandler+0x200>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00a      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x98>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5f      	ldr	r2, [pc, #380]	; (8002b70 <HAL_DMA_IRQHandler+0x204>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d102      	bne.n	80029fe <HAL_DMA_IRQHandler+0x92>
 80029f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029fc:	e00e      	b.n	8002a1c <HAL_DMA_IRQHandler+0xb0>
 80029fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a02:	e00b      	b.n	8002a1c <HAL_DMA_IRQHandler+0xb0>
 8002a04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a08:	e008      	b.n	8002a1c <HAL_DMA_IRQHandler+0xb0>
 8002a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a0e:	e005      	b.n	8002a1c <HAL_DMA_IRQHandler+0xb0>
 8002a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a14:	e002      	b.n	8002a1c <HAL_DMA_IRQHandler+0xb0>
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	e000      	b.n	8002a1c <HAL_DMA_IRQHandler+0xb0>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	4a55      	ldr	r2, [pc, #340]	; (8002b74 <HAL_DMA_IRQHandler+0x208>)
 8002a1e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8094 	beq.w	8002b52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a32:	e08e      	b.n	8002b52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2202      	movs	r2, #2
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d056      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x186>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d051      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 020a 	bic.w	r2, r2, #10
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a38      	ldr	r2, [pc, #224]	; (8002b5c <HAL_DMA_IRQHandler+0x1f0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d029      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x166>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a37      	ldr	r2, [pc, #220]	; (8002b60 <HAL_DMA_IRQHandler+0x1f4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_IRQHandler+0x162>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a35      	ldr	r2, [pc, #212]	; (8002b64 <HAL_DMA_IRQHandler+0x1f8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d01a      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x15c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <HAL_DMA_IRQHandler+0x1fc>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d012      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x156>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a32      	ldr	r2, [pc, #200]	; (8002b6c <HAL_DMA_IRQHandler+0x200>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00a      	beq.n	8002abc <HAL_DMA_IRQHandler+0x150>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <HAL_DMA_IRQHandler+0x204>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <HAL_DMA_IRQHandler+0x14a>
 8002ab0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ab4:	e00e      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x168>
 8002ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aba:	e00b      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x168>
 8002abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ac0:	e008      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x168>
 8002ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac6:	e005      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x168>
 8002ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002acc:	e002      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x168>
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e000      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x168>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_DMA_IRQHandler+0x208>)
 8002ad6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d034      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002af0:	e02f      	b.n	8002b52 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2208      	movs	r2, #8
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d028      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x1e8>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d023      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 020e 	bic.w	r2, r2, #14
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	2101      	movs	r1, #1
 8002b26:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
    }
  }
  return;
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
}
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40020008 	.word	0x40020008
 8002b60:	4002001c 	.word	0x4002001c
 8002b64:	40020030 	.word	0x40020030
 8002b68:	40020044 	.word	0x40020044
 8002b6c:	40020058 	.word	0x40020058
 8002b70:	4002006c 	.word	0x4002006c
 8002b74:	40020000 	.word	0x40020000

08002b78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	2101      	movs	r1, #1
 8002b90:	fa01 f202 	lsl.w	r2, r1, r2
 8002b94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d108      	bne.n	8002bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bb6:	e007      	b.n	8002bc8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
	...

08002bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b08b      	sub	sp, #44	; 0x2c
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002be6:	e127      	b.n	8002e38 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002be8:	2201      	movs	r2, #1
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 8116 	bne.w	8002e32 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d034      	beq.n	8002c78 <HAL_GPIO_Init+0xa4>
 8002c0e:	2b12      	cmp	r3, #18
 8002c10:	d80d      	bhi.n	8002c2e <HAL_GPIO_Init+0x5a>
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d02b      	beq.n	8002c6e <HAL_GPIO_Init+0x9a>
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d804      	bhi.n	8002c24 <HAL_GPIO_Init+0x50>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d031      	beq.n	8002c82 <HAL_GPIO_Init+0xae>
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d01c      	beq.n	8002c5c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c22:	e048      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d043      	beq.n	8002cb0 <HAL_GPIO_Init+0xdc>
 8002c28:	2b11      	cmp	r3, #17
 8002c2a:	d01b      	beq.n	8002c64 <HAL_GPIO_Init+0x90>
          break;
 8002c2c:	e043      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c2e:	4a89      	ldr	r2, [pc, #548]	; (8002e54 <HAL_GPIO_Init+0x280>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d026      	beq.n	8002c82 <HAL_GPIO_Init+0xae>
 8002c34:	4a87      	ldr	r2, [pc, #540]	; (8002e54 <HAL_GPIO_Init+0x280>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d806      	bhi.n	8002c48 <HAL_GPIO_Init+0x74>
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_GPIO_Init+0x284>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d020      	beq.n	8002c82 <HAL_GPIO_Init+0xae>
 8002c40:	4a86      	ldr	r2, [pc, #536]	; (8002e5c <HAL_GPIO_Init+0x288>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01d      	beq.n	8002c82 <HAL_GPIO_Init+0xae>
          break;
 8002c46:	e036      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002c48:	4a85      	ldr	r2, [pc, #532]	; (8002e60 <HAL_GPIO_Init+0x28c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_GPIO_Init+0xae>
 8002c4e:	4a85      	ldr	r2, [pc, #532]	; (8002e64 <HAL_GPIO_Init+0x290>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d016      	beq.n	8002c82 <HAL_GPIO_Init+0xae>
 8002c54:	4a84      	ldr	r2, [pc, #528]	; (8002e68 <HAL_GPIO_Init+0x294>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0xae>
          break;
 8002c5a:	e02c      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	623b      	str	r3, [r7, #32]
          break;
 8002c62:	e028      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	623b      	str	r3, [r7, #32]
          break;
 8002c6c:	e023      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	3308      	adds	r3, #8
 8002c74:	623b      	str	r3, [r7, #32]
          break;
 8002c76:	e01e      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	623b      	str	r3, [r7, #32]
          break;
 8002c80:	e019      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	623b      	str	r3, [r7, #32]
          break;
 8002c8e:	e012      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	611a      	str	r2, [r3, #16]
          break;
 8002ca2:	e008      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	615a      	str	r2, [r3, #20]
          break;
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
          break;
 8002cb4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2bff      	cmp	r3, #255	; 0xff
 8002cba:	d801      	bhi.n	8002cc0 <HAL_GPIO_Init+0xec>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	e001      	b.n	8002cc4 <HAL_GPIO_Init+0xf0>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2bff      	cmp	r3, #255	; 0xff
 8002cca:	d802      	bhi.n	8002cd2 <HAL_GPIO_Init+0xfe>
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_Init+0x104>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	3b08      	subs	r3, #8
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	210f      	movs	r1, #15
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	401a      	ands	r2, r3
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8096 	beq.w	8002e32 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d06:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_GPIO_Init+0x298>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_GPIO_Init+0x298>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6193      	str	r3, [r2, #24]
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_GPIO_Init+0x298>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d1e:	4a54      	ldr	r2, [pc, #336]	; (8002e70 <HAL_GPIO_Init+0x29c>)
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_GPIO_Init+0x2a0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x19e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4a      	ldr	r2, [pc, #296]	; (8002e78 <HAL_GPIO_Init+0x2a4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x19a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a49      	ldr	r2, [pc, #292]	; (8002e7c <HAL_GPIO_Init+0x2a8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x196>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a48      	ldr	r2, [pc, #288]	; (8002e80 <HAL_GPIO_Init+0x2ac>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x192>
 8002d62:	2303      	movs	r3, #3
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x1a0>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x1a0>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x1a0>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x1a0>
 8002d72:	2300      	movs	r3, #0
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d84:	493a      	ldr	r1, [pc, #232]	; (8002e70 <HAL_GPIO_Init+0x29c>)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d9e:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4938      	ldr	r1, [pc, #224]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
 8002daa:	e006      	b.n	8002dba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4933      	ldr	r1, [pc, #204]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dc6:	4b2f      	ldr	r3, [pc, #188]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	492e      	ldr	r1, [pc, #184]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
 8002dd2:	e006      	b.n	8002de2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	4929      	ldr	r1, [pc, #164]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	4924      	ldr	r1, [pc, #144]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	608b      	str	r3, [r1, #8]
 8002dfa:	e006      	b.n	8002e0a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dfc:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	491f      	ldr	r1, [pc, #124]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e16:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	491a      	ldr	r1, [pc, #104]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60cb      	str	r3, [r1, #12]
 8002e22:	e006      	b.n	8002e32 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e24:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4915      	ldr	r1, [pc, #84]	; (8002e84 <HAL_GPIO_Init+0x2b0>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	3301      	adds	r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f47f aed0 	bne.w	8002be8 <HAL_GPIO_Init+0x14>
  }
}
 8002e48:	bf00      	nop
 8002e4a:	372c      	adds	r7, #44	; 0x2c
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	10210000 	.word	0x10210000
 8002e58:	10110000 	.word	0x10110000
 8002e5c:	10120000 	.word	0x10120000
 8002e60:	10310000 	.word	0x10310000
 8002e64:	10320000 	.word	0x10320000
 8002e68:	10220000 	.word	0x10220000
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40010000 	.word	0x40010000
 8002e74:	40010800 	.word	0x40010800
 8002e78:	40010c00 	.word	0x40010c00
 8002e7c:	40011000 	.word	0x40011000
 8002e80:	40011400 	.word	0x40011400
 8002e84:	40010400 	.word	0x40010400

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e26c      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8087 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea8:	4b92      	ldr	r3, [pc, #584]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00c      	beq.n	8002ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002eb4:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d112      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ece:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d168      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e246      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x76>
 8002ef0:	4b80      	ldr	r3, [pc, #512]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7f      	ldr	r2, [pc, #508]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	e02e      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x98>
 8002f06:	4b7b      	ldr	r3, [pc, #492]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7a      	ldr	r2, [pc, #488]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b78      	ldr	r3, [pc, #480]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a77      	ldr	r2, [pc, #476]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0xbc>
 8002f2a:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a71      	ldr	r2, [pc, #452]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f44:	4b6b      	ldr	r3, [pc, #428]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6a      	ldr	r2, [pc, #424]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b68      	ldr	r3, [pc, #416]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a67      	ldr	r2, [pc, #412]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff fa80 	bl	8002468 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff fa7c 	bl	8002468 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1fa      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b5d      	ldr	r3, [pc, #372]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe4>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7ff fa6c 	bl	8002468 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff fa68 	bl	8002468 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1e6      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x10c>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc2:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fce:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
 8002fda:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1ba      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4939      	ldr	r1, [pc, #228]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <HAL_RCC_OscConfig+0x270>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7ff fa21 	bl	8002468 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7ff fa1d 	bl	8002468 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e19b      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4927      	ldr	r1, [pc, #156]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCC_OscConfig+0x270>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fa00 	bl	8002468 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306c:	f7ff f9fc 	bl	8002468 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e17a      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03a      	beq.n	800310c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d019      	beq.n	80030d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <HAL_RCC_OscConfig+0x274>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7ff f9e0 	bl	8002468 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7ff f9dc 	bl	8002468 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e15a      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCC_OscConfig+0x26c>)
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f000 fada 	bl	8003684 <RCC_Delay>
 80030d0:	e01c      	b.n	800310c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_RCC_OscConfig+0x274>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7ff f9c6 	bl	8002468 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030de:	e00f      	b.n	8003100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e0:	f7ff f9c2 	bl	8002468 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d908      	bls.n	8003100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e140      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	42420000 	.word	0x42420000
 80030fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b9e      	ldr	r3, [pc, #632]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e9      	bne.n	80030e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a6 	beq.w	8003266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b97      	ldr	r3, [pc, #604]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b94      	ldr	r3, [pc, #592]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4a93      	ldr	r2, [pc, #588]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	61d3      	str	r3, [r2, #28]
 8003136:	4b91      	ldr	r3, [pc, #580]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b8e      	ldr	r3, [pc, #568]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d118      	bne.n	8003184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b8b      	ldr	r3, [pc, #556]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a8a      	ldr	r2, [pc, #552]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7ff f983 	bl	8002468 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7ff f97f 	bl	8002468 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	; 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e0fd      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	4b81      	ldr	r3, [pc, #516]	; (8003380 <HAL_RCC_OscConfig+0x4f8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x312>
 800318c:	4b7b      	ldr	r3, [pc, #492]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a7a      	ldr	r2, [pc, #488]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	e02d      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10c      	bne.n	80031bc <HAL_RCC_OscConfig+0x334>
 80031a2:	4b76      	ldr	r3, [pc, #472]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a75      	ldr	r2, [pc, #468]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	4b73      	ldr	r3, [pc, #460]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a72      	ldr	r2, [pc, #456]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6213      	str	r3, [r2, #32]
 80031ba:	e01c      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x356>
 80031c4:	4b6d      	ldr	r3, [pc, #436]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4a6c      	ldr	r2, [pc, #432]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6213      	str	r3, [r2, #32]
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4a69      	ldr	r2, [pc, #420]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6213      	str	r3, [r2, #32]
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x36e>
 80031de:	4b67      	ldr	r3, [pc, #412]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4a66      	ldr	r2, [pc, #408]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4b64      	ldr	r3, [pc, #400]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a63      	ldr	r2, [pc, #396]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fe:	f7ff f933 	bl	8002468 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7ff f92f 	bl	8002468 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0ab      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b57      	ldr	r3, [pc, #348]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCC_OscConfig+0x37e>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7ff f91d 	bl	8002468 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7ff f919 	bl	8002468 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e095      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	4b4c      	ldr	r3, [pc, #304]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b48      	ldr	r3, [pc, #288]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8081 	beq.w	8003372 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003270:	4b42      	ldr	r3, [pc, #264]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d061      	beq.n	8003340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d146      	bne.n	8003312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <HAL_RCC_OscConfig+0x4fc>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7ff f8ed 	bl	8002468 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7ff f8e9 	bl	8002468 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e067      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	4b35      	ldr	r3, [pc, #212]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b8:	d108      	bne.n	80032cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ba:	4b30      	ldr	r3, [pc, #192]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	492d      	ldr	r1, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032cc:	4b2b      	ldr	r3, [pc, #172]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a19      	ldr	r1, [r3, #32]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	430b      	orrs	r3, r1
 80032de:	4927      	ldr	r1, [pc, #156]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x4fc>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7ff f8bd 	bl	8002468 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7ff f8b9 	bl	8002468 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e037      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003304:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46a>
 8003310:	e02f      	b.n	8003372 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <HAL_RCC_OscConfig+0x4fc>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7ff f8a6 	bl	8002468 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7ff f8a2 	bl	8002468 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e020      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x498>
 800333e:	e018      	b.n	8003372 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e013      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800334c:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_OscConfig+0x4f4>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	429a      	cmp	r2, r3
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336a:	429a      	cmp	r2, r3
 800336c:	d001      	beq.n	8003372 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	40007000 	.word	0x40007000
 8003384:	42420060 	.word	0x42420060

08003388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0d0      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d910      	bls.n	80033cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	4965      	ldr	r1, [pc, #404]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d040      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d115      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e073      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003456:	4b3d      	ldr	r3, [pc, #244]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06b      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 0203 	bic.w	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4936      	ldr	r1, [pc, #216]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003478:	f7fe fff6 	bl	8002468 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	e00a      	b.n	8003496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe fff2 	bl	8002468 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e053      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 020c 	and.w	r2, r3, #12
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d1eb      	bne.n	8003480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d210      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 0207 	bic.w	r2, r3, #7
 80034be:	4922      	ldr	r1, [pc, #136]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f821 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800351a:	4601      	mov	r1, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	5cd3      	ldrb	r3, [r2, r3]
 800352a:	fa21 f303 	lsr.w	r3, r1, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1cc>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1d0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe ff54 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	40021000 	.word	0x40021000
 8003550:	08005ffc 	.word	0x08005ffc
 8003554:	20000004 	.word	0x20000004
 8003558:	20000008 	.word	0x20000008

0800355c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b490      	push	{r4, r7}
 800355e:	b08a      	sub	sp, #40	; 0x28
 8003560:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003562:	4b2a      	ldr	r3, [pc, #168]	; (800360c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003564:	1d3c      	adds	r4, r7, #4
 8003566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_RCC_GetSysClockFreq+0xb4>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b04      	cmp	r3, #4
 8003594:	d002      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x40>
 8003596:	2b08      	cmp	r3, #8
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x46>
 800359a:	e02d      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <HAL_RCC_GetSysClockFreq+0xbc>)
 800359e:	623b      	str	r3, [r7, #32]
      break;
 80035a0:	e02d      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	0c9b      	lsrs	r3, r3, #18
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ae:	4413      	add	r3, r2
 80035b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0c5b      	lsrs	r3, r3, #17
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035ce:	4413      	add	r3, r2
 80035d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035da:	fb02 f203 	mul.w	r2, r2, r3
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	e004      	b.n	80035f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ec:	fb02 f303 	mul.w	r3, r2, r3
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	623b      	str	r3, [r7, #32]
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035fa:	623b      	str	r3, [r7, #32]
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3728      	adds	r7, #40	; 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bc90      	pop	{r4, r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	08005fe8 	.word	0x08005fe8
 8003610:	08005ff8 	.word	0x08005ff8
 8003614:	40021000 	.word	0x40021000
 8003618:	007a1200 	.word	0x007a1200
 800361c:	003d0900 	.word	0x003d0900

08003620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003624:	4b02      	ldr	r3, [pc, #8]	; (8003630 <HAL_RCC_GetHCLKFreq+0x10>)
 8003626:	681b      	ldr	r3, [r3, #0]
}
 8003628:	4618      	mov	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	20000004 	.word	0x20000004

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003638:	f7ff fff2 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 800363c:	4601      	mov	r1, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4a03      	ldr	r2, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364a:	5cd3      	ldrb	r3, [r2, r3]
 800364c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	0800600c 	.word	0x0800600c

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003660:	f7ff ffde 	bl	8003620 <HAL_RCC_GetHCLKFreq>
 8003664:	4601      	mov	r1, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	0adb      	lsrs	r3, r3, #11
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4a03      	ldr	r2, [pc, #12]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003672:	5cd3      	ldrb	r3, [r2, r3]
 8003674:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	0800600c 	.word	0x0800600c

08003684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <RCC_Delay+0x34>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <RCC_Delay+0x38>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0a5b      	lsrs	r3, r3, #9
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036a0:	bf00      	nop
  }
  while (Delay --);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	60fa      	str	r2, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f9      	bne.n	80036a0 <RCC_Delay+0x1c>
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000004 	.word	0x20000004
 80036bc:	10624dd3 	.word	0x10624dd3

080036c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e041      	b.n	8003756 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fce4 	bl	80020b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f000 fc28 	bl	8003f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_TIM_PWM_Start_DMA+0x28>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e022      	b.n	80037ce <HAL_TIM_PWM_Start_DMA+0x6e>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d109      	bne.n	80037a2 <HAL_TIM_PWM_Start_DMA+0x42>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	bf0c      	ite	eq
 800379a:	2301      	moveq	r3, #1
 800379c:	2300      	movne	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	e015      	b.n	80037ce <HAL_TIM_PWM_Start_DMA+0x6e>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d109      	bne.n	80037bc <HAL_TIM_PWM_Start_DMA+0x5c>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e008      	b.n	80037ce <HAL_TIM_PWM_Start_DMA+0x6e>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	e14e      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_TIM_PWM_Start_DMA+0x90>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e022      	b.n	8003836 <HAL_TIM_PWM_Start_DMA+0xd6>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d109      	bne.n	800380a <HAL_TIM_PWM_Start_DMA+0xaa>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	bf0c      	ite	eq
 8003802:	2301      	moveq	r3, #1
 8003804:	2300      	movne	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e015      	b.n	8003836 <HAL_TIM_PWM_Start_DMA+0xd6>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e008      	b.n	8003836 <HAL_TIM_PWM_Start_DMA+0xd6>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <HAL_TIM_PWM_Start_DMA+0xea>
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e114      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start_DMA+0xfa>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	e016      	b.n	8003888 <HAL_TIM_PWM_Start_DMA+0x128>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d104      	bne.n	800386a <HAL_TIM_PWM_Start_DMA+0x10a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003868:	e00e      	b.n	8003888 <HAL_TIM_PWM_Start_DMA+0x128>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d104      	bne.n	800387a <HAL_TIM_PWM_Start_DMA+0x11a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	e006      	b.n	8003888 <HAL_TIM_PWM_Start_DMA+0x128>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003882:	e001      	b.n	8003888 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0f5      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x314>
  }

  switch (Channel)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b0c      	cmp	r3, #12
 800388c:	f200 80ae 	bhi.w	80039ec <HAL_TIM_PWM_Start_DMA+0x28c>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <HAL_TIM_PWM_Start_DMA+0x138>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038cd 	.word	0x080038cd
 800389c:	080039ed 	.word	0x080039ed
 80038a0:	080039ed 	.word	0x080039ed
 80038a4:	080039ed 	.word	0x080039ed
 80038a8:	08003915 	.word	0x08003915
 80038ac:	080039ed 	.word	0x080039ed
 80038b0:	080039ed 	.word	0x080039ed
 80038b4:	080039ed 	.word	0x080039ed
 80038b8:	0800395d 	.word	0x0800395d
 80038bc:	080039ed 	.word	0x080039ed
 80038c0:	080039ed 	.word	0x080039ed
 80038c4:	080039ed 	.word	0x080039ed
 80038c8:	080039a5 	.word	0x080039a5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	4a69      	ldr	r2, [pc, #420]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x320>)
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	4a68      	ldr	r2, [pc, #416]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x324>)
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3334      	adds	r3, #52	; 0x34
 80038f0:	461a      	mov	r2, r3
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	f7fe ff2a 	bl	800274c <HAL_DMA_Start_IT>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0b8      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003910:	60da      	str	r2, [r3, #12]
      break;
 8003912:	e06c      	b.n	80039ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	4a57      	ldr	r2, [pc, #348]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	4a56      	ldr	r2, [pc, #344]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x324>)
 800392a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3338      	adds	r3, #56	; 0x38
 8003938:	461a      	mov	r2, r3
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	f7fe ff06 	bl	800274c <HAL_DMA_Start_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e094      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003958:	60da      	str	r2, [r3, #12]
      break;
 800395a:	e048      	b.n	80039ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	4a45      	ldr	r2, [pc, #276]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x320>)
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	4a44      	ldr	r2, [pc, #272]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003972:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	333c      	adds	r3, #60	; 0x3c
 8003980:	461a      	mov	r2, r3
 8003982:	887b      	ldrh	r3, [r7, #2]
 8003984:	f7fe fee2 	bl	800274c <HAL_DMA_Start_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e070      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a0:	60da      	str	r2, [r3, #12]
      break;
 80039a2:	e024      	b.n	80039ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	4a34      	ldr	r2, [pc, #208]	; (8003a7c <HAL_TIM_PWM_Start_DMA+0x31c>)
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	4a33      	ldr	r2, [pc, #204]	; (8003a80 <HAL_TIM_PWM_Start_DMA+0x320>)
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <HAL_TIM_PWM_Start_DMA+0x324>)
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3340      	adds	r3, #64	; 0x40
 80039c8:	461a      	mov	r2, r3
 80039ca:	887b      	ldrh	r3, [r7, #2]
 80039cc:	f7fe febe 	bl	800274c <HAL_DMA_Start_IT>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e04c      	b.n	8003a74 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039e8:	60da      	str	r2, [r3, #12]
      break;
 80039ea:	e000      	b.n	80039ee <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 80039ec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2201      	movs	r2, #1
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fc96 	bl	8004328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d107      	bne.n	8003a16 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_TIM_PWM_Start_DMA+0x328>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a28:	d009      	beq.n	8003a3e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_TIM_PWM_Start_DMA+0x2de>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a15      	ldr	r2, [pc, #84]	; (8003a90 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d010      	beq.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	e007      	b.n	8003a72 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	08003e43 	.word	0x08003e43
 8003a80:	08003eeb 	.word	0x08003eeb
 8003a84:	08003db1 	.word	0x08003db1
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800

08003a94 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	d855      	bhi.n	8003b50 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003b51 	.word	0x08003b51
 8003ab4:	08003b51 	.word	0x08003b51
 8003ab8:	08003b51 	.word	0x08003b51
 8003abc:	08003afd 	.word	0x08003afd
 8003ac0:	08003b51 	.word	0x08003b51
 8003ac4:	08003b51 	.word	0x08003b51
 8003ac8:	08003b51 	.word	0x08003b51
 8003acc:	08003b19 	.word	0x08003b19
 8003ad0:	08003b51 	.word	0x08003b51
 8003ad4:	08003b51 	.word	0x08003b51
 8003ad8:	08003b51 	.word	0x08003b51
 8003adc:	08003b35 	.word	0x08003b35
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003aee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fec3 	bl	8002880 <HAL_DMA_Abort_IT>
      break;
 8003afa:	e02a      	b.n	8003b52 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe feb5 	bl	8002880 <HAL_DMA_Abort_IT>
      break;
 8003b16:	e01c      	b.n	8003b52 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fea7 	bl	8002880 <HAL_DMA_Abort_IT>
      break;
 8003b32:	e00e      	b.n	8003b52 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe fe99 	bl	8002880 <HAL_DMA_Abort_IT>
      break;
 8003b4e:	e000      	b.n	8003b52 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003b50:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	6839      	ldr	r1, [r7, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fbe4 	bl	8004328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a29      	ldr	r2, [pc, #164]	; (8003c0c <HAL_TIM_PWM_Stop_DMA+0x178>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d117      	bne.n	8003b9a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	f240 4344 	movw	r3, #1092	; 0x444
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <HAL_TIM_PWM_Stop_DMA+0x106>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10f      	bne.n	8003bca <HAL_TIM_PWM_Stop_DMA+0x136>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a1a      	ldr	r2, [r3, #32]
 8003bb0:	f240 4344 	movw	r3, #1092	; 0x444
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <HAL_TIM_PWM_Stop_DMA+0x136>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0201 	bic.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d104      	bne.n	8003bda <HAL_TIM_PWM_Stop_DMA+0x146>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	e013      	b.n	8003c02 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d104      	bne.n	8003bea <HAL_TIM_PWM_Stop_DMA+0x156>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	e00b      	b.n	8003c02 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_PWM_Stop_DMA+0x166>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf8:	e003      	b.n	8003c02 <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40012c00 	.word	0x40012c00

08003c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0ac      	b.n	8003d84 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b0c      	cmp	r3, #12
 8003c36:	f200 809f 	bhi.w	8003d78 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c75 	.word	0x08003c75
 8003c44:	08003d79 	.word	0x08003d79
 8003c48:	08003d79 	.word	0x08003d79
 8003c4c:	08003d79 	.word	0x08003d79
 8003c50:	08003cb5 	.word	0x08003cb5
 8003c54:	08003d79 	.word	0x08003d79
 8003c58:	08003d79 	.word	0x08003d79
 8003c5c:	08003d79 	.word	0x08003d79
 8003c60:	08003cf7 	.word	0x08003cf7
 8003c64:	08003d79 	.word	0x08003d79
 8003c68:	08003d79 	.word	0x08003d79
 8003c6c:	08003d79 	.word	0x08003d79
 8003c70:	08003d37 	.word	0x08003d37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f9cc 	bl	8004018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699a      	ldr	r2, [r3, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6999      	ldr	r1, [r3, #24]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	619a      	str	r2, [r3, #24]
      break;
 8003cb2:	e062      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fa12 	bl	80040e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6999      	ldr	r1, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	021a      	lsls	r2, r3, #8
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
      break;
 8003cf4:	e041      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fa5b 	bl	80041b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0208 	orr.w	r2, r2, #8
 8003d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69da      	ldr	r2, [r3, #28]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0204 	bic.w	r2, r2, #4
 8003d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69d9      	ldr	r1, [r3, #28]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	61da      	str	r2, [r3, #28]
      break;
 8003d34:	e021      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 faa5 	bl	800428c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	021a      	lsls	r2, r3, #8
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	61da      	str	r2, [r3, #28]
      break;
 8003d76:	e000      	b.n	8003d7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d107      	bne.n	8003dd8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd6:	e02a      	b.n	8003e2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d107      	bne.n	8003df2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df0:	e01d      	b.n	8003e2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2204      	movs	r2, #4
 8003e00:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e0a:	e010      	b.n	8003e2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d107      	bne.n	8003e26 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e24:	e003      	b.n	8003e2e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff ffb5 	bl	8003d9e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	771a      	strb	r2, [r3, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d10b      	bne.n	8003e72 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d136      	bne.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e70:	e031      	b.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d10b      	bne.n	8003e94 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d125      	bne.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e92:	e020      	b.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d10b      	bne.n	8003eb6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d114      	bne.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb4:	e00f      	b.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d10a      	bne.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7fd f8ac 	bl	8001034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	771a      	strb	r2, [r3, #28]
}
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d103      	bne.n	8003f0a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	771a      	strb	r2, [r3, #28]
 8003f08:	e019      	b.n	8003f3e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d103      	bne.n	8003f1c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2202      	movs	r2, #2
 8003f18:	771a      	strb	r2, [r3, #28]
 8003f1a:	e010      	b.n	8003f3e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d103      	bne.n	8003f2e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	771a      	strb	r2, [r3, #28]
 8003f2c:	e007      	b.n	8003f3e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d102      	bne.n	8003f3e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff ff24 	bl	8003d8c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	771a      	strb	r2, [r3, #28]
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a29      	ldr	r2, [pc, #164]	; (800400c <TIM_Base_SetConfig+0xb8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <TIM_Base_SetConfig+0x30>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f72:	d007      	beq.n	8003f84 <TIM_Base_SetConfig+0x30>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <TIM_Base_SetConfig+0xbc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_Base_SetConfig+0x30>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a25      	ldr	r2, [pc, #148]	; (8004014 <TIM_Base_SetConfig+0xc0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d108      	bne.n	8003f96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1c      	ldr	r2, [pc, #112]	; (800400c <TIM_Base_SetConfig+0xb8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00b      	beq.n	8003fb6 <TIM_Base_SetConfig+0x62>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa4:	d007      	beq.n	8003fb6 <TIM_Base_SetConfig+0x62>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a19      	ldr	r2, [pc, #100]	; (8004010 <TIM_Base_SetConfig+0xbc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d003      	beq.n	8003fb6 <TIM_Base_SetConfig+0x62>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <TIM_Base_SetConfig+0xc0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a07      	ldr	r2, [pc, #28]	; (800400c <TIM_Base_SetConfig+0xb8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d103      	bne.n	8003ffc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	615a      	str	r2, [r3, #20]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800

08004018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004018:	b480      	push	{r7}
 800401a:	b087      	sub	sp, #28
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	f023 0201 	bic.w	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 0302 	bic.w	r3, r3, #2
 8004060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0308 	bic.w	r3, r3, #8
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <TIM_OC1_SetConfig+0xc8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d111      	bne.n	80040ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40012c00 	.word	0x40012c00

080040e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0210 	bic.w	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	021b      	lsls	r3, r3, #8
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0320 	bic.w	r3, r3, #32
 800412e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <TIM_OC2_SetConfig+0xd0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d10d      	bne.n	8004160 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800414a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <TIM_OC2_SetConfig+0xd0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d113      	bne.n	8004190 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	40012c00 	.word	0x40012c00

080041b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <TIM_OC3_SetConfig+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d10d      	bne.n	8004232 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800421c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a14      	ldr	r2, [pc, #80]	; (8004288 <TIM_OC3_SetConfig+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40012c00 	.word	0x40012c00

0800428c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	031b      	lsls	r3, r3, #12
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <TIM_OC4_SetConfig+0x98>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d109      	bne.n	8004300 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00

08004328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2201      	movs	r2, #1
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	43db      	mvns	r3, r3
 800434a:	401a      	ands	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1a      	ldr	r2, [r3, #32]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004384:	2302      	movs	r3, #2
 8004386:	e046      	b.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a16      	ldr	r2, [pc, #88]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d009      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a10      	ldr	r2, [pc, #64]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10c      	bne.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40000400 	.word	0x40000400
 8004428:	40000800 	.word	0x40000800

0800442c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e03f      	b.n	80044be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd feb0 	bl	80021b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	; 0x24
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fcc1 	bl	8004df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d13c      	bne.n	800455a <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e035      	b.n	800455c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e02e      	b.n	800455c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2201      	movs	r2, #1
 800450a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	461a      	mov	r2, r3
 8004510:	68b9      	ldr	r1, [r7, #8]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 faa6 	bl	8004a64 <UART_Start_Receive_DMA>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d119      	bne.n	8004556 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	2b01      	cmp	r3, #1
 8004528:	d113      	bne.n	8004552 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0210 	orr.w	r2, r2, #16
 800454e:	60da      	str	r2, [r3, #12]
 8004550:	e001      	b.n	8004556 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	e000      	b.n	800455c <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	; 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_UART_IRQHandler+0x52>
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fb78 	bl	8004ca4 <UART_Receive_IT>
      return;
 80045b4:	e17c      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80b1 	beq.w	8004720 <HAL_UART_IRQHandler+0x1bc>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_UART_IRQHandler+0x70>
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80a6 	beq.w	8004720 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_UART_IRQHandler+0x90>
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_UART_IRQHandler+0xb0>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	f043 0202 	orr.w	r2, r3, #2
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_UART_IRQHandler+0xd0>
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	f043 0204 	orr.w	r2, r3, #4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <HAL_UART_IRQHandler+0xfa>
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <HAL_UART_IRQHandler+0xee>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f043 0208 	orr.w	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 811f 	beq.w	80048a6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_UART_IRQHandler+0x11e>
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fb11 	bl	8004ca4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <HAL_UART_IRQHandler+0x146>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d031      	beq.n	800470e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa53 	bl	8004b56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d023      	beq.n	8004706 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695a      	ldr	r2, [r3, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	4a77      	ldr	r2, [pc, #476]	; (80048b8 <HAL_UART_IRQHandler+0x354>)
 80046dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe f8cc 	bl	8002880 <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00e      	b.n	800471c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f8f7 	bl	80048f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e00a      	b.n	800471c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f8f3 	bl	80048f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e006      	b.n	800471c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8ef 	bl	80048f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800471a:	e0c4      	b.n	80048a6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	bf00      	nop
    return;
 800471e:	e0c2      	b.n	80048a6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	2b01      	cmp	r3, #1
 8004726:	f040 80a1 	bne.w	800486c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 809b 	beq.w	800486c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8095 	beq.w	800486c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d04e      	beq.n	8004804 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004770:	8a3b      	ldrh	r3, [r7, #16]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8099 	beq.w	80048aa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477c:	8a3a      	ldrh	r2, [r7, #16]
 800477e:	429a      	cmp	r2, r3
 8004780:	f080 8093 	bcs.w	80048aa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8a3a      	ldrh	r2, [r7, #16]
 8004788:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b20      	cmp	r3, #32
 8004792:	d02b      	beq.n	80047ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0210 	bic.w	r2, r2, #16
 80047e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe f80f 	bl	800280a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fd fa5f 	bl	8001cc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004802:	e052      	b.n	80048aa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800480c:	b29b      	uxth	r3, r3
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d048      	beq.n	80048ae <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800481c:	8a7b      	ldrh	r3, [r7, #18]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d045      	beq.n	80048ae <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004830:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0210 	bic.w	r2, r2, #16
 800485e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004860:	8a7b      	ldrh	r3, [r7, #18]
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fd fa2b 	bl	8001cc0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800486a:	e020      	b.n	80048ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_UART_IRQHandler+0x324>
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f9a8 	bl	8004bd6 <UART_Transmit_IT>
    return;
 8004886:	e013      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00e      	beq.n	80048b0 <HAL_UART_IRQHandler+0x34c>
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f9e9 	bl	8004c74 <UART_EndTransmit_IT>
    return;
 80048a2:	bf00      	nop
 80048a4:	e004      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
    return;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <HAL_UART_IRQHandler+0x34c>
      return;
 80048ae:	bf00      	nop
  }
}
 80048b0:	3728      	adds	r7, #40	; 0x28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	08004baf 	.word	0x08004baf

080048bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bc80      	pop	{r7}
 80048f0:	4770      	bx	lr

080048f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d12a      	bne.n	8004976 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004934:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004954:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	2b01      	cmp	r3, #1
 8004964:	d107      	bne.n	8004976 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0210 	bic.w	r2, r2, #16
 8004974:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	2b01      	cmp	r3, #1
 800497c:	d106      	bne.n	800498c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004982:	4619      	mov	r1, r3
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7fd f99b 	bl	8001cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800498a:	e002      	b.n	8004992 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff ff9e 	bl	80048ce <HAL_UART_RxCpltCallback>
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d108      	bne.n	80049c2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	4619      	mov	r1, r3
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7fd f980 	bl	8001cc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80049c0:	e002      	b.n	80049c8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7ff ff8c 	bl	80048e0 <HAL_UART_RxHalfCpltCallback>
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b21      	cmp	r3, #33	; 0x21
 8004a02:	d108      	bne.n	8004a16 <UART_DMAError+0x46>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a10:	68b8      	ldr	r0, [r7, #8]
 8004a12:	f000 f88b 	bl	8004b2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b22      	cmp	r3, #34	; 0x22
 8004a36:	d108      	bne.n	8004a4a <UART_DMAError+0x7a>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004a44:	68b8      	ldr	r0, [r7, #8]
 8004a46:	f000 f886 	bl	8004b56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a56:	68b8      	ldr	r0, [r7, #8]
 8004a58:	f7ff ff4b 	bl	80048f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2222      	movs	r2, #34	; 0x22
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	4a23      	ldr	r2, [pc, #140]	; (8004b20 <UART_Start_Receive_DMA+0xbc>)
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	4a22      	ldr	r2, [pc, #136]	; (8004b24 <UART_Start_Receive_DMA+0xc0>)
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	4a21      	ldr	r2, [pc, #132]	; (8004b28 <UART_Start_Receive_DMA+0xc4>)
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	f7fd fe42 	bl	800274c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b14:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	08004905 	.word	0x08004905
 8004b24:	0800499b 	.word	0x0800499b
 8004b28:	080049d1 	.word	0x080049d1

08004b2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004b42:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b6c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0210 	bic.w	r2, r2, #16
 8004b94:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f7ff fe92 	bl	80048f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b21      	cmp	r3, #33	; 0x21
 8004be8:	d13e      	bne.n	8004c68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf2:	d114      	bne.n	8004c1e <UART_Transmit_IT+0x48>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d110      	bne.n	8004c1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	1c9a      	adds	r2, r3, #2
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	621a      	str	r2, [r3, #32]
 8004c1c:	e008      	b.n	8004c30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	1c59      	adds	r1, r3, #1
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6211      	str	r1, [r2, #32]
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10f      	bne.n	8004c64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e000      	b.n	8004c6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr

08004c74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fe11 	bl	80048bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b22      	cmp	r3, #34	; 0x22
 8004cb6:	f040 8099 	bne.w	8004dec <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc2:	d117      	bne.n	8004cf4 <UART_Receive_IT+0x50>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d113      	bne.n	8004cf4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8004cf2:	e026      	b.n	8004d42 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d06:	d007      	beq.n	8004d18 <UART_Receive_IT+0x74>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <UART_Receive_IT+0x82>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	e008      	b.n	8004d38 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d148      	bne.n	8004de8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0220 	bic.w	r2, r2, #32
 8004d64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d123      	bne.n	8004dde <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0210 	bic.w	r2, r2, #16
 8004daa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b10      	cmp	r3, #16
 8004db8:	d10a      	bne.n	8004dd0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc ff72 	bl	8001cc0 <HAL_UARTEx_RxEventCallback>
 8004ddc:	e002      	b.n	8004de4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fd75 	bl	80048ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e002      	b.n	8004dee <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e32:	f023 030c 	bic.w	r3, r3, #12
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a2c      	ldr	r2, [pc, #176]	; (8004f0c <UART_SetConfig+0x114>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d103      	bne.n	8004e68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7fe fbfc 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	e002      	b.n	8004e6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e68:	f7fe fbe4 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004e6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009a      	lsls	r2, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <UART_SetConfig+0x118>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	0119      	lsls	r1, r3, #4
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009a      	lsls	r2, r3, #2
 8004e98:	441a      	add	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	; (8004f10 <UART_SetConfig+0x118>)
 8004ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	2064      	movs	r0, #100	; 0x64
 8004eae:	fb00 f303 	mul.w	r3, r0, r3
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	3332      	adds	r3, #50	; 0x32
 8004eb8:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <UART_SetConfig+0x118>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec4:	4419      	add	r1, r3
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	009a      	lsls	r2, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <UART_SetConfig+0x118>)
 8004ede:	fba3 0302 	umull	r0, r3, r3, r2
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	2064      	movs	r0, #100	; 0x64
 8004ee6:	fb00 f303 	mul.w	r3, r0, r3
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	3332      	adds	r3, #50	; 0x32
 8004ef0:	4a07      	ldr	r2, [pc, #28]	; (8004f10 <UART_SetConfig+0x118>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f003 020f 	and.w	r2, r3, #15
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	440a      	add	r2, r1
 8004f02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40013800 	.word	0x40013800
 8004f10:	51eb851f 	.word	0x51eb851f

08004f14 <__libc_init_array>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	2500      	movs	r5, #0
 8004f18:	4e0c      	ldr	r6, [pc, #48]	; (8004f4c <__libc_init_array+0x38>)
 8004f1a:	4c0d      	ldr	r4, [pc, #52]	; (8004f50 <__libc_init_array+0x3c>)
 8004f1c:	1ba4      	subs	r4, r4, r6
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	42a5      	cmp	r5, r4
 8004f22:	d109      	bne.n	8004f38 <__libc_init_array+0x24>
 8004f24:	f001 f854 	bl	8005fd0 <_init>
 8004f28:	2500      	movs	r5, #0
 8004f2a:	4e0a      	ldr	r6, [pc, #40]	; (8004f54 <__libc_init_array+0x40>)
 8004f2c:	4c0a      	ldr	r4, [pc, #40]	; (8004f58 <__libc_init_array+0x44>)
 8004f2e:	1ba4      	subs	r4, r4, r6
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	42a5      	cmp	r5, r4
 8004f34:	d105      	bne.n	8004f42 <__libc_init_array+0x2e>
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
 8004f38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f3c:	4798      	blx	r3
 8004f3e:	3501      	adds	r5, #1
 8004f40:	e7ee      	b.n	8004f20 <__libc_init_array+0xc>
 8004f42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f46:	4798      	blx	r3
 8004f48:	3501      	adds	r5, #1
 8004f4a:	e7f2      	b.n	8004f32 <__libc_init_array+0x1e>
 8004f4c:	080061f0 	.word	0x080061f0
 8004f50:	080061f0 	.word	0x080061f0
 8004f54:	080061f0 	.word	0x080061f0
 8004f58:	080061f4 	.word	0x080061f4

08004f5c <memcpy>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	1e43      	subs	r3, r0, #1
 8004f60:	440a      	add	r2, r1
 8004f62:	4291      	cmp	r1, r2
 8004f64:	d100      	bne.n	8004f68 <memcpy+0xc>
 8004f66:	bd10      	pop	{r4, pc}
 8004f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f70:	e7f7      	b.n	8004f62 <memcpy+0x6>

08004f72 <memset>:
 8004f72:	4603      	mov	r3, r0
 8004f74:	4402      	add	r2, r0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d100      	bne.n	8004f7c <memset+0xa>
 8004f7a:	4770      	bx	lr
 8004f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f80:	e7f9      	b.n	8004f76 <memset+0x4>
	...

08004f84 <tan>:
 8004f84:	b530      	push	{r4, r5, lr}
 8004f86:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <tan+0x4c>)
 8004f88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	b087      	sub	sp, #28
 8004f90:	dc06      	bgt.n	8004fa0 <tan+0x1c>
 8004f92:	2301      	movs	r3, #1
 8004f94:	2200      	movs	r2, #0
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f000 fd59 	bl	8005a50 <__kernel_tan>
 8004f9e:	e006      	b.n	8004fae <tan+0x2a>
 8004fa0:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <tan+0x50>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	dd05      	ble.n	8004fb2 <tan+0x2e>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	f7fb f8d5 	bl	8000158 <__aeabi_dsub>
 8004fae:	b007      	add	sp, #28
 8004fb0:	bd30      	pop	{r4, r5, pc}
 8004fb2:	aa02      	add	r2, sp, #8
 8004fb4:	f000 f810 	bl	8004fd8 <__ieee754_rem_pio2>
 8004fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fbc:	0040      	lsls	r0, r0, #1
 8004fbe:	f000 0002 	and.w	r0, r0, #2
 8004fc2:	f1c0 0001 	rsb	r0, r0, #1
 8004fc6:	9000      	str	r0, [sp, #0]
 8004fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fcc:	e7e5      	b.n	8004f9a <tan+0x16>
 8004fce:	bf00      	nop
 8004fd0:	3fe921fb 	.word	0x3fe921fb
 8004fd4:	7fefffff 	.word	0x7fefffff

08004fd8 <__ieee754_rem_pio2>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	4614      	mov	r4, r2
 8004fde:	4ac2      	ldr	r2, [pc, #776]	; (80052e8 <__ieee754_rem_pio2+0x310>)
 8004fe0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004fe4:	4592      	cmp	sl, r2
 8004fe6:	b08d      	sub	sp, #52	; 0x34
 8004fe8:	468b      	mov	fp, r1
 8004fea:	dc07      	bgt.n	8004ffc <__ieee754_rem_pio2+0x24>
 8004fec:	2200      	movs	r2, #0
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e9c4 0100 	strd	r0, r1, [r4]
 8004ff4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004ff8:	2500      	movs	r5, #0
 8004ffa:	e023      	b.n	8005044 <__ieee754_rem_pio2+0x6c>
 8004ffc:	4abb      	ldr	r2, [pc, #748]	; (80052ec <__ieee754_rem_pio2+0x314>)
 8004ffe:	4592      	cmp	sl, r2
 8005000:	dc71      	bgt.n	80050e6 <__ieee754_rem_pio2+0x10e>
 8005002:	a3ab      	add	r3, pc, #684	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2d8>)
 8005004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005008:	2900      	cmp	r1, #0
 800500a:	4db9      	ldr	r5, [pc, #740]	; (80052f0 <__ieee754_rem_pio2+0x318>)
 800500c:	dd36      	ble.n	800507c <__ieee754_rem_pio2+0xa4>
 800500e:	f7fb f8a3 	bl	8000158 <__aeabi_dsub>
 8005012:	45aa      	cmp	sl, r5
 8005014:	4606      	mov	r6, r0
 8005016:	460f      	mov	r7, r1
 8005018:	d018      	beq.n	800504c <__ieee754_rem_pio2+0x74>
 800501a:	a3a7      	add	r3, pc, #668	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2e0>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb f89a 	bl	8000158 <__aeabi_dsub>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4630      	mov	r0, r6
 800502a:	e9c4 2300 	strd	r2, r3, [r4]
 800502e:	4639      	mov	r1, r7
 8005030:	f7fb f892 	bl	8000158 <__aeabi_dsub>
 8005034:	a3a0      	add	r3, pc, #640	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2e0>)
 8005036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503a:	f7fb f88d 	bl	8000158 <__aeabi_dsub>
 800503e:	2501      	movs	r5, #1
 8005040:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005044:	4628      	mov	r0, r5
 8005046:	b00d      	add	sp, #52	; 0x34
 8005048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504c:	a39c      	add	r3, pc, #624	; (adr r3, 80052c0 <__ieee754_rem_pio2+0x2e8>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f7fb f881 	bl	8000158 <__aeabi_dsub>
 8005056:	a39c      	add	r3, pc, #624	; (adr r3, 80052c8 <__ieee754_rem_pio2+0x2f0>)
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	4606      	mov	r6, r0
 800505e:	460f      	mov	r7, r1
 8005060:	f7fb f87a 	bl	8000158 <__aeabi_dsub>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4630      	mov	r0, r6
 800506a:	e9c4 2300 	strd	r2, r3, [r4]
 800506e:	4639      	mov	r1, r7
 8005070:	f7fb f872 	bl	8000158 <__aeabi_dsub>
 8005074:	a394      	add	r3, pc, #592	; (adr r3, 80052c8 <__ieee754_rem_pio2+0x2f0>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	e7de      	b.n	800503a <__ieee754_rem_pio2+0x62>
 800507c:	f7fb f86e 	bl	800015c <__adddf3>
 8005080:	45aa      	cmp	sl, r5
 8005082:	4606      	mov	r6, r0
 8005084:	460f      	mov	r7, r1
 8005086:	d016      	beq.n	80050b6 <__ieee754_rem_pio2+0xde>
 8005088:	a38b      	add	r3, pc, #556	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2e0>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb f865 	bl	800015c <__adddf3>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4630      	mov	r0, r6
 8005098:	e9c4 2300 	strd	r2, r3, [r4]
 800509c:	4639      	mov	r1, r7
 800509e:	f7fb f85b 	bl	8000158 <__aeabi_dsub>
 80050a2:	a385      	add	r3, pc, #532	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2e0>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f7fb f858 	bl	800015c <__adddf3>
 80050ac:	f04f 35ff 	mov.w	r5, #4294967295
 80050b0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050b4:	e7c6      	b.n	8005044 <__ieee754_rem_pio2+0x6c>
 80050b6:	a382      	add	r3, pc, #520	; (adr r3, 80052c0 <__ieee754_rem_pio2+0x2e8>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb f84e 	bl	800015c <__adddf3>
 80050c0:	a381      	add	r3, pc, #516	; (adr r3, 80052c8 <__ieee754_rem_pio2+0x2f0>)
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	4606      	mov	r6, r0
 80050c8:	460f      	mov	r7, r1
 80050ca:	f7fb f847 	bl	800015c <__adddf3>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4630      	mov	r0, r6
 80050d4:	e9c4 2300 	strd	r2, r3, [r4]
 80050d8:	4639      	mov	r1, r7
 80050da:	f7fb f83d 	bl	8000158 <__aeabi_dsub>
 80050de:	a37a      	add	r3, pc, #488	; (adr r3, 80052c8 <__ieee754_rem_pio2+0x2f0>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	e7e0      	b.n	80050a8 <__ieee754_rem_pio2+0xd0>
 80050e6:	4a83      	ldr	r2, [pc, #524]	; (80052f4 <__ieee754_rem_pio2+0x31c>)
 80050e8:	4592      	cmp	sl, r2
 80050ea:	f300 80d2 	bgt.w	8005292 <__ieee754_rem_pio2+0x2ba>
 80050ee:	f000 fe6f 	bl	8005dd0 <fabs>
 80050f2:	a377      	add	r3, pc, #476	; (adr r3, 80052d0 <__ieee754_rem_pio2+0x2f8>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	4606      	mov	r6, r0
 80050fa:	460f      	mov	r7, r1
 80050fc:	f7fb f9e4 	bl	80004c8 <__aeabi_dmul>
 8005100:	2200      	movs	r2, #0
 8005102:	4b7d      	ldr	r3, [pc, #500]	; (80052f8 <__ieee754_rem_pio2+0x320>)
 8005104:	f7fb f82a 	bl	800015c <__adddf3>
 8005108:	f7fb fc78 	bl	80009fc <__aeabi_d2iz>
 800510c:	4605      	mov	r5, r0
 800510e:	f7fb f971 	bl	80003f4 <__aeabi_i2d>
 8005112:	a367      	add	r3, pc, #412	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2d8>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800511c:	f7fb f9d4 	bl	80004c8 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4630      	mov	r0, r6
 8005126:	4639      	mov	r1, r7
 8005128:	f7fb f816 	bl	8000158 <__aeabi_dsub>
 800512c:	a362      	add	r3, pc, #392	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2e0>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	4606      	mov	r6, r0
 8005134:	460f      	mov	r7, r1
 8005136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800513a:	f7fb f9c5 	bl	80004c8 <__aeabi_dmul>
 800513e:	2d1f      	cmp	r5, #31
 8005140:	4680      	mov	r8, r0
 8005142:	4689      	mov	r9, r1
 8005144:	dc0e      	bgt.n	8005164 <__ieee754_rem_pio2+0x18c>
 8005146:	4b6d      	ldr	r3, [pc, #436]	; (80052fc <__ieee754_rem_pio2+0x324>)
 8005148:	1e6a      	subs	r2, r5, #1
 800514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514e:	4553      	cmp	r3, sl
 8005150:	d008      	beq.n	8005164 <__ieee754_rem_pio2+0x18c>
 8005152:	4642      	mov	r2, r8
 8005154:	464b      	mov	r3, r9
 8005156:	4630      	mov	r0, r6
 8005158:	4639      	mov	r1, r7
 800515a:	f7fa fffd 	bl	8000158 <__aeabi_dsub>
 800515e:	e9c4 0100 	strd	r0, r1, [r4]
 8005162:	e011      	b.n	8005188 <__ieee754_rem_pio2+0x1b0>
 8005164:	464b      	mov	r3, r9
 8005166:	4642      	mov	r2, r8
 8005168:	4630      	mov	r0, r6
 800516a:	4639      	mov	r1, r7
 800516c:	f7fa fff4 	bl	8000158 <__aeabi_dsub>
 8005170:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005174:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005178:	ebaa 0303 	sub.w	r3, sl, r3
 800517c:	2b10      	cmp	r3, #16
 800517e:	dc1f      	bgt.n	80051c0 <__ieee754_rem_pio2+0x1e8>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	e9c4 2300 	strd	r2, r3, [r4]
 8005188:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800518c:	4630      	mov	r0, r6
 800518e:	4653      	mov	r3, sl
 8005190:	4639      	mov	r1, r7
 8005192:	f7fa ffe1 	bl	8000158 <__aeabi_dsub>
 8005196:	4642      	mov	r2, r8
 8005198:	464b      	mov	r3, r9
 800519a:	f7fa ffdd 	bl	8000158 <__aeabi_dsub>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	f1bb 0f00 	cmp.w	fp, #0
 80051a6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80051aa:	f6bf af4b 	bge.w	8005044 <__ieee754_rem_pio2+0x6c>
 80051ae:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80051b2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 80051b6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80051ba:	60e1      	str	r1, [r4, #12]
 80051bc:	426d      	negs	r5, r5
 80051be:	e741      	b.n	8005044 <__ieee754_rem_pio2+0x6c>
 80051c0:	a33f      	add	r3, pc, #252	; (adr r3, 80052c0 <__ieee754_rem_pio2+0x2e8>)
 80051c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ca:	f7fb f97d 	bl	80004c8 <__aeabi_dmul>
 80051ce:	4680      	mov	r8, r0
 80051d0:	4689      	mov	r9, r1
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4630      	mov	r0, r6
 80051d8:	4639      	mov	r1, r7
 80051da:	f7fa ffbd 	bl	8000158 <__aeabi_dsub>
 80051de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4630      	mov	r0, r6
 80051e8:	4639      	mov	r1, r7
 80051ea:	f7fa ffb5 	bl	8000158 <__aeabi_dsub>
 80051ee:	4642      	mov	r2, r8
 80051f0:	464b      	mov	r3, r9
 80051f2:	f7fa ffb1 	bl	8000158 <__aeabi_dsub>
 80051f6:	a334      	add	r3, pc, #208	; (adr r3, 80052c8 <__ieee754_rem_pio2+0x2f0>)
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005204:	f7fb f960 	bl	80004c8 <__aeabi_dmul>
 8005208:	4632      	mov	r2, r6
 800520a:	463b      	mov	r3, r7
 800520c:	f7fa ffa4 	bl	8000158 <__aeabi_dsub>
 8005210:	460b      	mov	r3, r1
 8005212:	4602      	mov	r2, r0
 8005214:	4680      	mov	r8, r0
 8005216:	4689      	mov	r9, r1
 8005218:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800521c:	f7fa ff9c 	bl	8000158 <__aeabi_dsub>
 8005220:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005224:	ebaa 0a03 	sub.w	sl, sl, r3
 8005228:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800522c:	dc06      	bgt.n	800523c <__ieee754_rem_pio2+0x264>
 800522e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9c4 2300 	strd	r2, r3, [r4]
 800523a:	e7a5      	b.n	8005188 <__ieee754_rem_pio2+0x1b0>
 800523c:	a326      	add	r3, pc, #152	; (adr r3, 80052d8 <__ieee754_rem_pio2+0x300>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005246:	f7fb f93f 	bl	80004c8 <__aeabi_dmul>
 800524a:	4680      	mov	r8, r0
 800524c:	4689      	mov	r9, r1
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005256:	f7fa ff7f 	bl	8000158 <__aeabi_dsub>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4606      	mov	r6, r0
 8005260:	460f      	mov	r7, r1
 8005262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005266:	f7fa ff77 	bl	8000158 <__aeabi_dsub>
 800526a:	4642      	mov	r2, r8
 800526c:	464b      	mov	r3, r9
 800526e:	f7fa ff73 	bl	8000158 <__aeabi_dsub>
 8005272:	a31b      	add	r3, pc, #108	; (adr r3, 80052e0 <__ieee754_rem_pio2+0x308>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	4680      	mov	r8, r0
 800527a:	4689      	mov	r9, r1
 800527c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005280:	f7fb f922 	bl	80004c8 <__aeabi_dmul>
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	f7fa ff66 	bl	8000158 <__aeabi_dsub>
 800528c:	4680      	mov	r8, r0
 800528e:	4689      	mov	r9, r1
 8005290:	e75f      	b.n	8005152 <__ieee754_rem_pio2+0x17a>
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <__ieee754_rem_pio2+0x328>)
 8005294:	4592      	cmp	sl, r2
 8005296:	dd35      	ble.n	8005304 <__ieee754_rem_pio2+0x32c>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	f7fa ff5c 	bl	8000158 <__aeabi_dsub>
 80052a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052a4:	e9c4 0100 	strd	r0, r1, [r4]
 80052a8:	e6a6      	b.n	8004ff8 <__ieee754_rem_pio2+0x20>
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w
 80052b0:	54400000 	.word	0x54400000
 80052b4:	3ff921fb 	.word	0x3ff921fb
 80052b8:	1a626331 	.word	0x1a626331
 80052bc:	3dd0b461 	.word	0x3dd0b461
 80052c0:	1a600000 	.word	0x1a600000
 80052c4:	3dd0b461 	.word	0x3dd0b461
 80052c8:	2e037073 	.word	0x2e037073
 80052cc:	3ba3198a 	.word	0x3ba3198a
 80052d0:	6dc9c883 	.word	0x6dc9c883
 80052d4:	3fe45f30 	.word	0x3fe45f30
 80052d8:	2e000000 	.word	0x2e000000
 80052dc:	3ba3198a 	.word	0x3ba3198a
 80052e0:	252049c1 	.word	0x252049c1
 80052e4:	397b839a 	.word	0x397b839a
 80052e8:	3fe921fb 	.word	0x3fe921fb
 80052ec:	4002d97b 	.word	0x4002d97b
 80052f0:	3ff921fb 	.word	0x3ff921fb
 80052f4:	413921fb 	.word	0x413921fb
 80052f8:	3fe00000 	.word	0x3fe00000
 80052fc:	08006014 	.word	0x08006014
 8005300:	7fefffff 	.word	0x7fefffff
 8005304:	ea4f 552a 	mov.w	r5, sl, asr #20
 8005308:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800530c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005310:	460f      	mov	r7, r1
 8005312:	4606      	mov	r6, r0
 8005314:	f7fb fb72 	bl	80009fc <__aeabi_d2iz>
 8005318:	f7fb f86c 	bl	80003f4 <__aeabi_i2d>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005328:	f7fa ff16 	bl	8000158 <__aeabi_dsub>
 800532c:	2200      	movs	r2, #0
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <__ieee754_rem_pio2+0x3d8>)
 8005330:	f7fb f8ca 	bl	80004c8 <__aeabi_dmul>
 8005334:	460f      	mov	r7, r1
 8005336:	4606      	mov	r6, r0
 8005338:	f7fb fb60 	bl	80009fc <__aeabi_d2iz>
 800533c:	f7fb f85a 	bl	80003f4 <__aeabi_i2d>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4630      	mov	r0, r6
 8005346:	4639      	mov	r1, r7
 8005348:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800534c:	f7fa ff04 	bl	8000158 <__aeabi_dsub>
 8005350:	2200      	movs	r2, #0
 8005352:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <__ieee754_rem_pio2+0x3d8>)
 8005354:	f7fb f8b8 	bl	80004c8 <__aeabi_dmul>
 8005358:	f04f 0803 	mov.w	r8, #3
 800535c:	2600      	movs	r6, #0
 800535e:	2700      	movs	r7, #0
 8005360:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005364:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005368:	4632      	mov	r2, r6
 800536a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800536e:	463b      	mov	r3, r7
 8005370:	f108 3aff 	add.w	sl, r8, #4294967295
 8005374:	f7fb fb10 	bl	8000998 <__aeabi_dcmpeq>
 8005378:	b9b8      	cbnz	r0, 80053aa <__ieee754_rem_pio2+0x3d2>
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <__ieee754_rem_pio2+0x3dc>)
 800537c:	462a      	mov	r2, r5
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	2302      	movs	r3, #2
 8005382:	4621      	mov	r1, r4
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	a806      	add	r0, sp, #24
 8005388:	4643      	mov	r3, r8
 800538a:	f000 f815 	bl	80053b8 <__kernel_rem_pio2>
 800538e:	f1bb 0f00 	cmp.w	fp, #0
 8005392:	4605      	mov	r5, r0
 8005394:	f6bf ae56 	bge.w	8005044 <__ieee754_rem_pio2+0x6c>
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800539e:	6063      	str	r3, [r4, #4]
 80053a0:	68e3      	ldr	r3, [r4, #12]
 80053a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80053a6:	60e3      	str	r3, [r4, #12]
 80053a8:	e708      	b.n	80051bc <__ieee754_rem_pio2+0x1e4>
 80053aa:	46d0      	mov	r8, sl
 80053ac:	e7dc      	b.n	8005368 <__ieee754_rem_pio2+0x390>
 80053ae:	bf00      	nop
 80053b0:	41700000 	.word	0x41700000
 80053b4:	08006094 	.word	0x08006094

080053b8 <__kernel_rem_pio2>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80053c0:	9307      	str	r3, [sp, #28]
 80053c2:	9104      	str	r1, [sp, #16]
 80053c4:	4bbf      	ldr	r3, [pc, #764]	; (80056c4 <__kernel_rem_pio2+0x30c>)
 80053c6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80053c8:	1ed4      	subs	r4, r2, #3
 80053ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80053ce:	2500      	movs	r5, #0
 80053d0:	9302      	str	r3, [sp, #8]
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	9008      	str	r0, [sp, #32]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	9306      	str	r3, [sp, #24]
 80053da:	2318      	movs	r3, #24
 80053dc:	fb94 f4f3 	sdiv	r4, r4, r3
 80053e0:	f06f 0317 	mvn.w	r3, #23
 80053e4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80053e8:	fb04 3303 	mla	r3, r4, r3, r3
 80053ec:	eb03 0a02 	add.w	sl, r3, r2
 80053f0:	9a06      	ldr	r2, [sp, #24]
 80053f2:	9b02      	ldr	r3, [sp, #8]
 80053f4:	1aa7      	subs	r7, r4, r2
 80053f6:	eb03 0802 	add.w	r8, r3, r2
 80053fa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80053fc:	2200      	movs	r2, #0
 80053fe:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005402:	2300      	movs	r3, #0
 8005404:	ae1e      	add	r6, sp, #120	; 0x78
 8005406:	4545      	cmp	r5, r8
 8005408:	dd14      	ble.n	8005434 <__kernel_rem_pio2+0x7c>
 800540a:	2600      	movs	r6, #0
 800540c:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 8005410:	9b02      	ldr	r3, [sp, #8]
 8005412:	429e      	cmp	r6, r3
 8005414:	dc39      	bgt.n	800548a <__kernel_rem_pio2+0xd2>
 8005416:	9b08      	ldr	r3, [sp, #32]
 8005418:	f04f 0800 	mov.w	r8, #0
 800541c:	3b08      	subs	r3, #8
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	9b07      	ldr	r3, [sp, #28]
 8005422:	f04f 0900 	mov.w	r9, #0
 8005426:	199d      	adds	r5, r3, r6
 8005428:	ab20      	add	r3, sp, #128	; 0x80
 800542a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800542e:	9305      	str	r3, [sp, #20]
 8005430:	2700      	movs	r7, #0
 8005432:	e023      	b.n	800547c <__kernel_rem_pio2+0xc4>
 8005434:	42ef      	cmn	r7, r5
 8005436:	d40b      	bmi.n	8005450 <__kernel_rem_pio2+0x98>
 8005438:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800543c:	e9cd 2300 	strd	r2, r3, [sp]
 8005440:	f7fa ffd8 	bl	80003f4 <__aeabi_i2d>
 8005444:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005448:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800544c:	3501      	adds	r5, #1
 800544e:	e7da      	b.n	8005406 <__kernel_rem_pio2+0x4e>
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	e7f8      	b.n	8005448 <__kernel_rem_pio2+0x90>
 8005456:	9905      	ldr	r1, [sp, #20]
 8005458:	9d00      	ldr	r5, [sp, #0]
 800545a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800545e:	9105      	str	r1, [sp, #20]
 8005460:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8005464:	9500      	str	r5, [sp, #0]
 8005466:	f7fb f82f 	bl	80004c8 <__aeabi_dmul>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4640      	mov	r0, r8
 8005470:	4649      	mov	r1, r9
 8005472:	f7fa fe73 	bl	800015c <__adddf3>
 8005476:	4680      	mov	r8, r0
 8005478:	4689      	mov	r9, r1
 800547a:	3701      	adds	r7, #1
 800547c:	9b06      	ldr	r3, [sp, #24]
 800547e:	429f      	cmp	r7, r3
 8005480:	dde9      	ble.n	8005456 <__kernel_rem_pio2+0x9e>
 8005482:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8005486:	3601      	adds	r6, #1
 8005488:	e7c2      	b.n	8005410 <__kernel_rem_pio2+0x58>
 800548a:	9b02      	ldr	r3, [sp, #8]
 800548c:	aa0c      	add	r2, sp, #48	; 0x30
 800548e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005492:	930b      	str	r3, [sp, #44]	; 0x2c
 8005494:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005496:	9f02      	ldr	r7, [sp, #8]
 8005498:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800549c:	930a      	str	r3, [sp, #40]	; 0x28
 800549e:	2600      	movs	r6, #0
 80054a0:	ab98      	add	r3, sp, #608	; 0x260
 80054a2:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80054a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80054b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80054b6:	ab98      	add	r3, sp, #608	; 0x260
 80054b8:	445b      	add	r3, fp
 80054ba:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 80054be:	1bbb      	subs	r3, r7, r6
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dc71      	bgt.n	80055a8 <__kernel_rem_pio2+0x1f0>
 80054c4:	4652      	mov	r2, sl
 80054c6:	4640      	mov	r0, r8
 80054c8:	4649      	mov	r1, r9
 80054ca:	f000 fd09 	bl	8005ee0 <scalbn>
 80054ce:	2200      	movs	r2, #0
 80054d0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80054d4:	4604      	mov	r4, r0
 80054d6:	460d      	mov	r5, r1
 80054d8:	f7fa fff6 	bl	80004c8 <__aeabi_dmul>
 80054dc:	f000 fc7c 	bl	8005dd8 <floor>
 80054e0:	2200      	movs	r2, #0
 80054e2:	4b79      	ldr	r3, [pc, #484]	; (80056c8 <__kernel_rem_pio2+0x310>)
 80054e4:	f7fa fff0 	bl	80004c8 <__aeabi_dmul>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4620      	mov	r0, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	f7fa fe32 	bl	8000158 <__aeabi_dsub>
 80054f4:	460d      	mov	r5, r1
 80054f6:	4604      	mov	r4, r0
 80054f8:	f7fb fa80 	bl	80009fc <__aeabi_d2iz>
 80054fc:	9005      	str	r0, [sp, #20]
 80054fe:	f7fa ff79 	bl	80003f4 <__aeabi_i2d>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f7fa fe25 	bl	8000158 <__aeabi_dsub>
 800550e:	f1ba 0f00 	cmp.w	sl, #0
 8005512:	4680      	mov	r8, r0
 8005514:	4689      	mov	r9, r1
 8005516:	dd6c      	ble.n	80055f2 <__kernel_rem_pio2+0x23a>
 8005518:	1e7a      	subs	r2, r7, #1
 800551a:	ab0c      	add	r3, sp, #48	; 0x30
 800551c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005520:	f1ca 0118 	rsb	r1, sl, #24
 8005524:	9c05      	ldr	r4, [sp, #20]
 8005526:	fa40 f301 	asr.w	r3, r0, r1
 800552a:	441c      	add	r4, r3
 800552c:	408b      	lsls	r3, r1
 800552e:	1ac0      	subs	r0, r0, r3
 8005530:	ab0c      	add	r3, sp, #48	; 0x30
 8005532:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005536:	f1ca 0317 	rsb	r3, sl, #23
 800553a:	9405      	str	r4, [sp, #20]
 800553c:	fa40 f303 	asr.w	r3, r0, r3
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	9b00      	ldr	r3, [sp, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dd62      	ble.n	800560e <__kernel_rem_pio2+0x256>
 8005548:	2200      	movs	r2, #0
 800554a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800554e:	4614      	mov	r4, r2
 8005550:	9b05      	ldr	r3, [sp, #20]
 8005552:	3301      	adds	r3, #1
 8005554:	9305      	str	r3, [sp, #20]
 8005556:	4297      	cmp	r7, r2
 8005558:	f300 809f 	bgt.w	800569a <__kernel_rem_pio2+0x2e2>
 800555c:	f1ba 0f00 	cmp.w	sl, #0
 8005560:	dd07      	ble.n	8005572 <__kernel_rem_pio2+0x1ba>
 8005562:	f1ba 0f01 	cmp.w	sl, #1
 8005566:	f000 80bb 	beq.w	80056e0 <__kernel_rem_pio2+0x328>
 800556a:	f1ba 0f02 	cmp.w	sl, #2
 800556e:	f000 80c1 	beq.w	80056f4 <__kernel_rem_pio2+0x33c>
 8005572:	9b00      	ldr	r3, [sp, #0]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d14a      	bne.n	800560e <__kernel_rem_pio2+0x256>
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	2000      	movs	r0, #0
 800557e:	4953      	ldr	r1, [pc, #332]	; (80056cc <__kernel_rem_pio2+0x314>)
 8005580:	f7fa fdea 	bl	8000158 <__aeabi_dsub>
 8005584:	4680      	mov	r8, r0
 8005586:	4689      	mov	r9, r1
 8005588:	2c00      	cmp	r4, #0
 800558a:	d040      	beq.n	800560e <__kernel_rem_pio2+0x256>
 800558c:	4652      	mov	r2, sl
 800558e:	2000      	movs	r0, #0
 8005590:	494e      	ldr	r1, [pc, #312]	; (80056cc <__kernel_rem_pio2+0x314>)
 8005592:	f000 fca5 	bl	8005ee0 <scalbn>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	f7fa fddb 	bl	8000158 <__aeabi_dsub>
 80055a2:	4680      	mov	r8, r0
 80055a4:	4689      	mov	r9, r1
 80055a6:	e032      	b.n	800560e <__kernel_rem_pio2+0x256>
 80055a8:	2200      	movs	r2, #0
 80055aa:	4b49      	ldr	r3, [pc, #292]	; (80056d0 <__kernel_rem_pio2+0x318>)
 80055ac:	4640      	mov	r0, r8
 80055ae:	4649      	mov	r1, r9
 80055b0:	f7fa ff8a 	bl	80004c8 <__aeabi_dmul>
 80055b4:	f7fb fa22 	bl	80009fc <__aeabi_d2iz>
 80055b8:	f7fa ff1c 	bl	80003f4 <__aeabi_i2d>
 80055bc:	2200      	movs	r2, #0
 80055be:	4b45      	ldr	r3, [pc, #276]	; (80056d4 <__kernel_rem_pio2+0x31c>)
 80055c0:	e9cd 0100 	strd	r0, r1, [sp]
 80055c4:	f7fa ff80 	bl	80004c8 <__aeabi_dmul>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4640      	mov	r0, r8
 80055ce:	4649      	mov	r1, r9
 80055d0:	f7fa fdc2 	bl	8000158 <__aeabi_dsub>
 80055d4:	f7fb fa12 	bl	80009fc <__aeabi_d2iz>
 80055d8:	ab0c      	add	r3, sp, #48	; 0x30
 80055da:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80055de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055e6:	f7fa fdb9 	bl	800015c <__adddf3>
 80055ea:	3601      	adds	r6, #1
 80055ec:	4680      	mov	r8, r0
 80055ee:	4689      	mov	r9, r1
 80055f0:	e765      	b.n	80054be <__kernel_rem_pio2+0x106>
 80055f2:	d105      	bne.n	8005600 <__kernel_rem_pio2+0x248>
 80055f4:	1e7b      	subs	r3, r7, #1
 80055f6:	aa0c      	add	r2, sp, #48	; 0x30
 80055f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80055fc:	15c3      	asrs	r3, r0, #23
 80055fe:	e79f      	b.n	8005540 <__kernel_rem_pio2+0x188>
 8005600:	2200      	movs	r2, #0
 8005602:	4b35      	ldr	r3, [pc, #212]	; (80056d8 <__kernel_rem_pio2+0x320>)
 8005604:	f7fb f9e6 	bl	80009d4 <__aeabi_dcmpge>
 8005608:	2800      	cmp	r0, #0
 800560a:	d143      	bne.n	8005694 <__kernel_rem_pio2+0x2dc>
 800560c:	9000      	str	r0, [sp, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	2300      	movs	r3, #0
 8005612:	4640      	mov	r0, r8
 8005614:	4649      	mov	r1, r9
 8005616:	f7fb f9bf 	bl	8000998 <__aeabi_dcmpeq>
 800561a:	2800      	cmp	r0, #0
 800561c:	f000 80c3 	beq.w	80057a6 <__kernel_rem_pio2+0x3ee>
 8005620:	1e7c      	subs	r4, r7, #1
 8005622:	4623      	mov	r3, r4
 8005624:	2200      	movs	r2, #0
 8005626:	9902      	ldr	r1, [sp, #8]
 8005628:	428b      	cmp	r3, r1
 800562a:	da6a      	bge.n	8005702 <__kernel_rem_pio2+0x34a>
 800562c:	2a00      	cmp	r2, #0
 800562e:	f000 8084 	beq.w	800573a <__kernel_rem_pio2+0x382>
 8005632:	ab0c      	add	r3, sp, #48	; 0x30
 8005634:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005638:	f1aa 0a18 	sub.w	sl, sl, #24
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 80b0 	beq.w	80057a2 <__kernel_rem_pio2+0x3ea>
 8005642:	4652      	mov	r2, sl
 8005644:	2000      	movs	r0, #0
 8005646:	4921      	ldr	r1, [pc, #132]	; (80056cc <__kernel_rem_pio2+0x314>)
 8005648:	f000 fc4a 	bl	8005ee0 <scalbn>
 800564c:	4625      	mov	r5, r4
 800564e:	4606      	mov	r6, r0
 8005650:	460f      	mov	r7, r1
 8005652:	f04f 0a00 	mov.w	sl, #0
 8005656:	00e3      	lsls	r3, r4, #3
 8005658:	aa98      	add	r2, sp, #608	; 0x260
 800565a:	eb02 0803 	add.w	r8, r2, r3
 800565e:	f8df b070 	ldr.w	fp, [pc, #112]	; 80056d0 <__kernel_rem_pio2+0x318>
 8005662:	9306      	str	r3, [sp, #24]
 8005664:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 8005668:	2d00      	cmp	r5, #0
 800566a:	f280 80d2 	bge.w	8005812 <__kernel_rem_pio2+0x45a>
 800566e:	2500      	movs	r5, #0
 8005670:	9a06      	ldr	r2, [sp, #24]
 8005672:	ab98      	add	r3, sp, #608	; 0x260
 8005674:	189e      	adds	r6, r3, r2
 8005676:	3ea8      	subs	r6, #168	; 0xa8
 8005678:	1b63      	subs	r3, r4, r5
 800567a:	2b00      	cmp	r3, #0
 800567c:	f2c0 80f9 	blt.w	8005872 <__kernel_rem_pio2+0x4ba>
 8005680:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80056dc <__kernel_rem_pio2+0x324>
 8005684:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 8005688:	f04f 0a00 	mov.w	sl, #0
 800568c:	f04f 0b00 	mov.w	fp, #0
 8005690:	2700      	movs	r7, #0
 8005692:	e0e2      	b.n	800585a <__kernel_rem_pio2+0x4a2>
 8005694:	2302      	movs	r3, #2
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	e756      	b.n	8005548 <__kernel_rem_pio2+0x190>
 800569a:	ab0c      	add	r3, sp, #48	; 0x30
 800569c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a0:	b94c      	cbnz	r4, 80056b6 <__kernel_rem_pio2+0x2fe>
 80056a2:	b12b      	cbz	r3, 80056b0 <__kernel_rem_pio2+0x2f8>
 80056a4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80056a8:	a80c      	add	r0, sp, #48	; 0x30
 80056aa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80056ae:	2301      	movs	r3, #1
 80056b0:	3201      	adds	r2, #1
 80056b2:	461c      	mov	r4, r3
 80056b4:	e74f      	b.n	8005556 <__kernel_rem_pio2+0x19e>
 80056b6:	1acb      	subs	r3, r1, r3
 80056b8:	a80c      	add	r0, sp, #48	; 0x30
 80056ba:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80056be:	4623      	mov	r3, r4
 80056c0:	e7f6      	b.n	80056b0 <__kernel_rem_pio2+0x2f8>
 80056c2:	bf00      	nop
 80056c4:	080061e0 	.word	0x080061e0
 80056c8:	40200000 	.word	0x40200000
 80056cc:	3ff00000 	.word	0x3ff00000
 80056d0:	3e700000 	.word	0x3e700000
 80056d4:	41700000 	.word	0x41700000
 80056d8:	3fe00000 	.word	0x3fe00000
 80056dc:	08006198 	.word	0x08006198
 80056e0:	1e7a      	subs	r2, r7, #1
 80056e2:	ab0c      	add	r3, sp, #48	; 0x30
 80056e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80056ec:	a90c      	add	r1, sp, #48	; 0x30
 80056ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80056f2:	e73e      	b.n	8005572 <__kernel_rem_pio2+0x1ba>
 80056f4:	1e7a      	subs	r2, r7, #1
 80056f6:	ab0c      	add	r3, sp, #48	; 0x30
 80056f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005700:	e7f4      	b.n	80056ec <__kernel_rem_pio2+0x334>
 8005702:	a90c      	add	r1, sp, #48	; 0x30
 8005704:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005708:	3b01      	subs	r3, #1
 800570a:	430a      	orrs	r2, r1
 800570c:	e78b      	b.n	8005626 <__kernel_rem_pio2+0x26e>
 800570e:	3401      	adds	r4, #1
 8005710:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005714:	2a00      	cmp	r2, #0
 8005716:	d0fa      	beq.n	800570e <__kernel_rem_pio2+0x356>
 8005718:	ab98      	add	r3, sp, #608	; 0x260
 800571a:	449b      	add	fp, r3
 800571c:	9b07      	ldr	r3, [sp, #28]
 800571e:	1c7e      	adds	r6, r7, #1
 8005720:	19dd      	adds	r5, r3, r7
 8005722:	ab98      	add	r3, sp, #608	; 0x260
 8005724:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005728:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800572c:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 8005730:	443c      	add	r4, r7
 8005732:	42b4      	cmp	r4, r6
 8005734:	da04      	bge.n	8005740 <__kernel_rem_pio2+0x388>
 8005736:	4627      	mov	r7, r4
 8005738:	e6b1      	b.n	800549e <__kernel_rem_pio2+0xe6>
 800573a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573c:	2401      	movs	r4, #1
 800573e:	e7e7      	b.n	8005710 <__kernel_rem_pio2+0x358>
 8005740:	f105 0308 	add.w	r3, r5, #8
 8005744:	9309      	str	r3, [sp, #36]	; 0x24
 8005746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005748:	2700      	movs	r7, #0
 800574a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800574e:	f7fa fe51 	bl	80003f4 <__aeabi_i2d>
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	f04f 0900 	mov.w	r9, #0
 800575a:	9b08      	ldr	r3, [sp, #32]
 800575c:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005760:	3b08      	subs	r3, #8
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	f105 0310 	add.w	r3, r5, #16
 8005768:	9305      	str	r3, [sp, #20]
 800576a:	9b06      	ldr	r3, [sp, #24]
 800576c:	429f      	cmp	r7, r3
 800576e:	dd04      	ble.n	800577a <__kernel_rem_pio2+0x3c2>
 8005770:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8005774:	3601      	adds	r6, #1
 8005776:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005778:	e7db      	b.n	8005732 <__kernel_rem_pio2+0x37a>
 800577a:	9905      	ldr	r1, [sp, #20]
 800577c:	9d00      	ldr	r5, [sp, #0]
 800577e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005782:	9105      	str	r1, [sp, #20]
 8005784:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 8005788:	9500      	str	r5, [sp, #0]
 800578a:	f7fa fe9d 	bl	80004c8 <__aeabi_dmul>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4640      	mov	r0, r8
 8005794:	4649      	mov	r1, r9
 8005796:	f7fa fce1 	bl	800015c <__adddf3>
 800579a:	3701      	adds	r7, #1
 800579c:	4680      	mov	r8, r0
 800579e:	4689      	mov	r9, r1
 80057a0:	e7e3      	b.n	800576a <__kernel_rem_pio2+0x3b2>
 80057a2:	3c01      	subs	r4, #1
 80057a4:	e745      	b.n	8005632 <__kernel_rem_pio2+0x27a>
 80057a6:	f1ca 0200 	rsb	r2, sl, #0
 80057aa:	4640      	mov	r0, r8
 80057ac:	4649      	mov	r1, r9
 80057ae:	f000 fb97 	bl	8005ee0 <scalbn>
 80057b2:	2200      	movs	r2, #0
 80057b4:	4ba3      	ldr	r3, [pc, #652]	; (8005a44 <__kernel_rem_pio2+0x68c>)
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
 80057ba:	f7fb f90b 	bl	80009d4 <__aeabi_dcmpge>
 80057be:	b1f8      	cbz	r0, 8005800 <__kernel_rem_pio2+0x448>
 80057c0:	2200      	movs	r2, #0
 80057c2:	4ba1      	ldr	r3, [pc, #644]	; (8005a48 <__kernel_rem_pio2+0x690>)
 80057c4:	4620      	mov	r0, r4
 80057c6:	4629      	mov	r1, r5
 80057c8:	f7fa fe7e 	bl	80004c8 <__aeabi_dmul>
 80057cc:	f7fb f916 	bl	80009fc <__aeabi_d2iz>
 80057d0:	4606      	mov	r6, r0
 80057d2:	f7fa fe0f 	bl	80003f4 <__aeabi_i2d>
 80057d6:	2200      	movs	r2, #0
 80057d8:	4b9a      	ldr	r3, [pc, #616]	; (8005a44 <__kernel_rem_pio2+0x68c>)
 80057da:	f7fa fe75 	bl	80004c8 <__aeabi_dmul>
 80057de:	460b      	mov	r3, r1
 80057e0:	4602      	mov	r2, r0
 80057e2:	4629      	mov	r1, r5
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7fa fcb7 	bl	8000158 <__aeabi_dsub>
 80057ea:	f7fb f907 	bl	80009fc <__aeabi_d2iz>
 80057ee:	1c7c      	adds	r4, r7, #1
 80057f0:	ab0c      	add	r3, sp, #48	; 0x30
 80057f2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80057f6:	f10a 0a18 	add.w	sl, sl, #24
 80057fa:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80057fe:	e720      	b.n	8005642 <__kernel_rem_pio2+0x28a>
 8005800:	4620      	mov	r0, r4
 8005802:	4629      	mov	r1, r5
 8005804:	f7fb f8fa 	bl	80009fc <__aeabi_d2iz>
 8005808:	ab0c      	add	r3, sp, #48	; 0x30
 800580a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800580e:	463c      	mov	r4, r7
 8005810:	e717      	b.n	8005642 <__kernel_rem_pio2+0x28a>
 8005812:	ab0c      	add	r3, sp, #48	; 0x30
 8005814:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005818:	f7fa fdec 	bl	80003f4 <__aeabi_i2d>
 800581c:	4632      	mov	r2, r6
 800581e:	463b      	mov	r3, r7
 8005820:	f7fa fe52 	bl	80004c8 <__aeabi_dmul>
 8005824:	4652      	mov	r2, sl
 8005826:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800582a:	465b      	mov	r3, fp
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	f7fa fe4a 	bl	80004c8 <__aeabi_dmul>
 8005834:	3d01      	subs	r5, #1
 8005836:	4606      	mov	r6, r0
 8005838:	460f      	mov	r7, r1
 800583a:	e715      	b.n	8005668 <__kernel_rem_pio2+0x2b0>
 800583c:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 8005840:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005844:	f7fa fe40 	bl	80004c8 <__aeabi_dmul>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	4650      	mov	r0, sl
 800584e:	4659      	mov	r1, fp
 8005850:	f7fa fc84 	bl	800015c <__adddf3>
 8005854:	4682      	mov	sl, r0
 8005856:	468b      	mov	fp, r1
 8005858:	3701      	adds	r7, #1
 800585a:	9b02      	ldr	r3, [sp, #8]
 800585c:	429f      	cmp	r7, r3
 800585e:	dc01      	bgt.n	8005864 <__kernel_rem_pio2+0x4ac>
 8005860:	42bd      	cmp	r5, r7
 8005862:	daeb      	bge.n	800583c <__kernel_rem_pio2+0x484>
 8005864:	ab48      	add	r3, sp, #288	; 0x120
 8005866:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800586a:	e9c3 ab00 	strd	sl, fp, [r3]
 800586e:	3501      	adds	r5, #1
 8005870:	e702      	b.n	8005678 <__kernel_rem_pio2+0x2c0>
 8005872:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005874:	2b03      	cmp	r3, #3
 8005876:	d86c      	bhi.n	8005952 <__kernel_rem_pio2+0x59a>
 8005878:	e8df f003 	tbb	[pc, r3]
 800587c:	022f2f59 	.word	0x022f2f59
 8005880:	9a06      	ldr	r2, [sp, #24]
 8005882:	ab48      	add	r3, sp, #288	; 0x120
 8005884:	189d      	adds	r5, r3, r2
 8005886:	46aa      	mov	sl, r5
 8005888:	46a3      	mov	fp, r4
 800588a:	f1bb 0f00 	cmp.w	fp, #0
 800588e:	f300 8087 	bgt.w	80059a0 <__kernel_rem_pio2+0x5e8>
 8005892:	46a2      	mov	sl, r4
 8005894:	f1ba 0f01 	cmp.w	sl, #1
 8005898:	f300 809f 	bgt.w	80059da <__kernel_rem_pio2+0x622>
 800589c:	2700      	movs	r7, #0
 800589e:	463e      	mov	r6, r7
 80058a0:	9d06      	ldr	r5, [sp, #24]
 80058a2:	ab48      	add	r3, sp, #288	; 0x120
 80058a4:	3508      	adds	r5, #8
 80058a6:	441d      	add	r5, r3
 80058a8:	2c01      	cmp	r4, #1
 80058aa:	f300 80b3 	bgt.w	8005a14 <__kernel_rem_pio2+0x65c>
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	9d48      	ldr	r5, [sp, #288]	; 0x120
 80058b2:	9849      	ldr	r0, [sp, #292]	; 0x124
 80058b4:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 80058b6:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f040 80b5 	bne.w	8005a28 <__kernel_rem_pio2+0x670>
 80058be:	4603      	mov	r3, r0
 80058c0:	462a      	mov	r2, r5
 80058c2:	9804      	ldr	r0, [sp, #16]
 80058c4:	e9c0 2300 	strd	r2, r3, [r0]
 80058c8:	4622      	mov	r2, r4
 80058ca:	460b      	mov	r3, r1
 80058cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80058d0:	463a      	mov	r2, r7
 80058d2:	4633      	mov	r3, r6
 80058d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80058d8:	e03b      	b.n	8005952 <__kernel_rem_pio2+0x59a>
 80058da:	f04f 0c00 	mov.w	ip, #0
 80058de:	4626      	mov	r6, r4
 80058e0:	4667      	mov	r7, ip
 80058e2:	9d06      	ldr	r5, [sp, #24]
 80058e4:	ab48      	add	r3, sp, #288	; 0x120
 80058e6:	3508      	adds	r5, #8
 80058e8:	441d      	add	r5, r3
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	da42      	bge.n	8005974 <__kernel_rem_pio2+0x5bc>
 80058ee:	9b00      	ldr	r3, [sp, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d049      	beq.n	8005988 <__kernel_rem_pio2+0x5d0>
 80058f4:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 80058f8:	4662      	mov	r2, ip
 80058fa:	460b      	mov	r3, r1
 80058fc:	9904      	ldr	r1, [sp, #16]
 80058fe:	2601      	movs	r6, #1
 8005900:	e9c1 2300 	strd	r2, r3, [r1]
 8005904:	a948      	add	r1, sp, #288	; 0x120
 8005906:	463b      	mov	r3, r7
 8005908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800590c:	f7fa fc24 	bl	8000158 <__aeabi_dsub>
 8005910:	4684      	mov	ip, r0
 8005912:	460f      	mov	r7, r1
 8005914:	ad48      	add	r5, sp, #288	; 0x120
 8005916:	42b4      	cmp	r4, r6
 8005918:	da38      	bge.n	800598c <__kernel_rem_pio2+0x5d4>
 800591a:	9b00      	ldr	r3, [sp, #0]
 800591c:	b10b      	cbz	r3, 8005922 <__kernel_rem_pio2+0x56a>
 800591e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005922:	4662      	mov	r2, ip
 8005924:	463b      	mov	r3, r7
 8005926:	9904      	ldr	r1, [sp, #16]
 8005928:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800592c:	e011      	b.n	8005952 <__kernel_rem_pio2+0x59a>
 800592e:	2700      	movs	r7, #0
 8005930:	463d      	mov	r5, r7
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	aa98      	add	r2, sp, #608	; 0x260
 8005936:	4413      	add	r3, r2
 8005938:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800593c:	2c00      	cmp	r4, #0
 800593e:	da0f      	bge.n	8005960 <__kernel_rem_pio2+0x5a8>
 8005940:	9b00      	ldr	r3, [sp, #0]
 8005942:	b10b      	cbz	r3, 8005948 <__kernel_rem_pio2+0x590>
 8005944:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005948:	463a      	mov	r2, r7
 800594a:	462b      	mov	r3, r5
 800594c:	9904      	ldr	r1, [sp, #16]
 800594e:	e9c1 2300 	strd	r2, r3, [r1]
 8005952:	9b05      	ldr	r3, [sp, #20]
 8005954:	f003 0007 	and.w	r0, r3, #7
 8005958:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	4638      	mov	r0, r7
 8005962:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005966:	4629      	mov	r1, r5
 8005968:	f7fa fbf8 	bl	800015c <__adddf3>
 800596c:	3c01      	subs	r4, #1
 800596e:	4607      	mov	r7, r0
 8005970:	460d      	mov	r5, r1
 8005972:	e7e3      	b.n	800593c <__kernel_rem_pio2+0x584>
 8005974:	4660      	mov	r0, ip
 8005976:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800597a:	4639      	mov	r1, r7
 800597c:	f7fa fbee 	bl	800015c <__adddf3>
 8005980:	3e01      	subs	r6, #1
 8005982:	4684      	mov	ip, r0
 8005984:	460f      	mov	r7, r1
 8005986:	e7b0      	b.n	80058ea <__kernel_rem_pio2+0x532>
 8005988:	4639      	mov	r1, r7
 800598a:	e7b5      	b.n	80058f8 <__kernel_rem_pio2+0x540>
 800598c:	4660      	mov	r0, ip
 800598e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8005992:	4639      	mov	r1, r7
 8005994:	f7fa fbe2 	bl	800015c <__adddf3>
 8005998:	3601      	adds	r6, #1
 800599a:	4684      	mov	ip, r0
 800599c:	460f      	mov	r7, r1
 800599e:	e7ba      	b.n	8005916 <__kernel_rem_pio2+0x55e>
 80059a0:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 80059a4:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059b0:	f7fa fbd4 	bl	800015c <__adddf3>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4606      	mov	r6, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	4640      	mov	r0, r8
 80059be:	4649      	mov	r1, r9
 80059c0:	f7fa fbca 	bl	8000158 <__aeabi_dsub>
 80059c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059c8:	f7fa fbc8 	bl	800015c <__adddf3>
 80059cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80059d4:	e9ca 6700 	strd	r6, r7, [sl]
 80059d8:	e757      	b.n	800588a <__kernel_rem_pio2+0x4d2>
 80059da:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 80059de:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059ea:	f7fa fbb7 	bl	800015c <__adddf3>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4680      	mov	r8, r0
 80059f4:	4689      	mov	r9, r1
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fa fbad 	bl	8000158 <__aeabi_dsub>
 80059fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a02:	f7fa fbab 	bl	800015c <__adddf3>
 8005a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a0a:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005a0e:	e9c5 8900 	strd	r8, r9, [r5]
 8005a12:	e73f      	b.n	8005894 <__kernel_rem_pio2+0x4dc>
 8005a14:	4638      	mov	r0, r7
 8005a16:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	f7fa fb9e 	bl	800015c <__adddf3>
 8005a20:	3c01      	subs	r4, #1
 8005a22:	4607      	mov	r7, r0
 8005a24:	460e      	mov	r6, r1
 8005a26:	e73f      	b.n	80058a8 <__kernel_rem_pio2+0x4f0>
 8005a28:	9b04      	ldr	r3, [sp, #16]
 8005a2a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005a2e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005a32:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005a36:	601d      	str	r5, [r3, #0]
 8005a38:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005a3c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005a40:	615e      	str	r6, [r3, #20]
 8005a42:	e786      	b.n	8005952 <__kernel_rem_pio2+0x59a>
 8005a44:	41700000 	.word	0x41700000
 8005a48:	3e700000 	.word	0x3e700000
 8005a4c:	00000000 	.word	0x00000000

08005a50 <__kernel_tan>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	461f      	mov	r7, r3
 8005a56:	4bda      	ldr	r3, [pc, #872]	; (8005dc0 <__kernel_tan+0x370>)
 8005a58:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005a5c:	b089      	sub	sp, #36	; 0x24
 8005a5e:	429e      	cmp	r6, r3
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	4690      	mov	r8, r2
 8005a66:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 8005a6a:	9105      	str	r1, [sp, #20]
 8005a6c:	dc21      	bgt.n	8005ab2 <__kernel_tan+0x62>
 8005a6e:	f7fa ffc5 	bl	80009fc <__aeabi_d2iz>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d140      	bne.n	8005af8 <__kernel_tan+0xa8>
 8005a76:	4652      	mov	r2, sl
 8005a78:	f109 0301 	add.w	r3, r9, #1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	4333      	orrs	r3, r6
 8005a80:	d110      	bne.n	8005aa4 <__kernel_tan+0x54>
 8005a82:	4650      	mov	r0, sl
 8005a84:	4659      	mov	r1, fp
 8005a86:	f000 f9a3 	bl	8005dd0 <fabs>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	49cc      	ldr	r1, [pc, #816]	; (8005dc4 <__kernel_tan+0x374>)
 8005a92:	f7fa fe43 	bl	800071c <__aeabi_ddiv>
 8005a96:	4682      	mov	sl, r0
 8005a98:	468b      	mov	fp, r1
 8005a9a:	4650      	mov	r0, sl
 8005a9c:	4659      	mov	r1, fp
 8005a9e:	b009      	add	sp, #36	; 0x24
 8005aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa4:	f1b9 0f01 	cmp.w	r9, #1
 8005aa8:	d0f7      	beq.n	8005a9a <__kernel_tan+0x4a>
 8005aaa:	465b      	mov	r3, fp
 8005aac:	2000      	movs	r0, #0
 8005aae:	49c6      	ldr	r1, [pc, #792]	; (8005dc8 <__kernel_tan+0x378>)
 8005ab0:	e7ef      	b.n	8005a92 <__kernel_tan+0x42>
 8005ab2:	4bc6      	ldr	r3, [pc, #792]	; (8005dcc <__kernel_tan+0x37c>)
 8005ab4:	429e      	cmp	r6, r3
 8005ab6:	dd1f      	ble.n	8005af8 <__kernel_tan+0xa8>
 8005ab8:	2900      	cmp	r1, #0
 8005aba:	da04      	bge.n	8005ac6 <__kernel_tan+0x76>
 8005abc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ac0:	469b      	mov	fp, r3
 8005ac2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8005ac6:	4652      	mov	r2, sl
 8005ac8:	a19f      	add	r1, pc, #636	; (adr r1, 8005d48 <__kernel_tan+0x2f8>)
 8005aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ace:	465b      	mov	r3, fp
 8005ad0:	f7fa fb42 	bl	8000158 <__aeabi_dsub>
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	460d      	mov	r5, r1
 8005ad8:	a19d      	add	r1, pc, #628	; (adr r1, 8005d50 <__kernel_tan+0x300>)
 8005ada:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ade:	4642      	mov	r2, r8
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	f7fa fb39 	bl	8000158 <__aeabi_dsub>
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	462b      	mov	r3, r5
 8005aea:	f7fa fb37 	bl	800015c <__adddf3>
 8005aee:	f04f 0800 	mov.w	r8, #0
 8005af2:	4682      	mov	sl, r0
 8005af4:	468b      	mov	fp, r1
 8005af6:	4647      	mov	r7, r8
 8005af8:	4652      	mov	r2, sl
 8005afa:	465b      	mov	r3, fp
 8005afc:	4650      	mov	r0, sl
 8005afe:	4659      	mov	r1, fp
 8005b00:	f7fa fce2 	bl	80004c8 <__aeabi_dmul>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	e9cd 0100 	strd	r0, r1, [sp]
 8005b0c:	f7fa fcdc 	bl	80004c8 <__aeabi_dmul>
 8005b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b14:	4604      	mov	r4, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	4650      	mov	r0, sl
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	f7fa fcd4 	bl	80004c8 <__aeabi_dmul>
 8005b20:	a38d      	add	r3, pc, #564	; (adr r3, 8005d58 <__kernel_tan+0x308>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	f7fa fccb 	bl	80004c8 <__aeabi_dmul>
 8005b32:	a38b      	add	r3, pc, #556	; (adr r3, 8005d60 <__kernel_tan+0x310>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f7fa fb10 	bl	800015c <__adddf3>
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	462b      	mov	r3, r5
 8005b40:	f7fa fcc2 	bl	80004c8 <__aeabi_dmul>
 8005b44:	a388      	add	r3, pc, #544	; (adr r3, 8005d68 <__kernel_tan+0x318>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fb07 	bl	800015c <__adddf3>
 8005b4e:	4622      	mov	r2, r4
 8005b50:	462b      	mov	r3, r5
 8005b52:	f7fa fcb9 	bl	80004c8 <__aeabi_dmul>
 8005b56:	a386      	add	r3, pc, #536	; (adr r3, 8005d70 <__kernel_tan+0x320>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fa fafe 	bl	800015c <__adddf3>
 8005b60:	4622      	mov	r2, r4
 8005b62:	462b      	mov	r3, r5
 8005b64:	f7fa fcb0 	bl	80004c8 <__aeabi_dmul>
 8005b68:	a383      	add	r3, pc, #524	; (adr r3, 8005d78 <__kernel_tan+0x328>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa faf5 	bl	800015c <__adddf3>
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	f7fa fca7 	bl	80004c8 <__aeabi_dmul>
 8005b7a:	a381      	add	r3, pc, #516	; (adr r3, 8005d80 <__kernel_tan+0x330>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa faec 	bl	800015c <__adddf3>
 8005b84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b88:	f7fa fc9e 	bl	80004c8 <__aeabi_dmul>
 8005b8c:	a37e      	add	r3, pc, #504	; (adr r3, 8005d88 <__kernel_tan+0x338>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa fc95 	bl	80004c8 <__aeabi_dmul>
 8005b9e:	a37c      	add	r3, pc, #496	; (adr r3, 8005d90 <__kernel_tan+0x340>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f7fa fada 	bl	800015c <__adddf3>
 8005ba8:	4622      	mov	r2, r4
 8005baa:	462b      	mov	r3, r5
 8005bac:	f7fa fc8c 	bl	80004c8 <__aeabi_dmul>
 8005bb0:	a379      	add	r3, pc, #484	; (adr r3, 8005d98 <__kernel_tan+0x348>)
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	f7fa fad1 	bl	800015c <__adddf3>
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f7fa fc83 	bl	80004c8 <__aeabi_dmul>
 8005bc2:	a377      	add	r3, pc, #476	; (adr r3, 8005da0 <__kernel_tan+0x350>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa fac8 	bl	800015c <__adddf3>
 8005bcc:	4622      	mov	r2, r4
 8005bce:	462b      	mov	r3, r5
 8005bd0:	f7fa fc7a 	bl	80004c8 <__aeabi_dmul>
 8005bd4:	a374      	add	r3, pc, #464	; (adr r3, 8005da8 <__kernel_tan+0x358>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa fabf 	bl	800015c <__adddf3>
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	f7fa fc71 	bl	80004c8 <__aeabi_dmul>
 8005be6:	a372      	add	r3, pc, #456	; (adr r3, 8005db0 <__kernel_tan+0x360>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fab6 	bl	800015c <__adddf3>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf8:	f7fa fab0 	bl	800015c <__adddf3>
 8005bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c00:	f7fa fc62 	bl	80004c8 <__aeabi_dmul>
 8005c04:	4642      	mov	r2, r8
 8005c06:	463b      	mov	r3, r7
 8005c08:	f7fa faa8 	bl	800015c <__adddf3>
 8005c0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c10:	f7fa fc5a 	bl	80004c8 <__aeabi_dmul>
 8005c14:	4642      	mov	r2, r8
 8005c16:	463b      	mov	r3, r7
 8005c18:	f7fa faa0 	bl	800015c <__adddf3>
 8005c1c:	a366      	add	r3, pc, #408	; (adr r3, 8005db8 <__kernel_tan+0x368>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	4604      	mov	r4, r0
 8005c24:	460d      	mov	r5, r1
 8005c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2a:	f7fa fc4d 	bl	80004c8 <__aeabi_dmul>
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	f7fa fa93 	bl	800015c <__adddf3>
 8005c36:	e9cd 0100 	strd	r0, r1, [sp]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	4659      	mov	r1, fp
 8005c40:	4650      	mov	r0, sl
 8005c42:	f7fa fa8b 	bl	800015c <__adddf3>
 8005c46:	4b61      	ldr	r3, [pc, #388]	; (8005dcc <__kernel_tan+0x37c>)
 8005c48:	4604      	mov	r4, r0
 8005c4a:	429e      	cmp	r6, r3
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	dd3d      	ble.n	8005ccc <__kernel_tan+0x27c>
 8005c50:	4648      	mov	r0, r9
 8005c52:	f7fa fbcf 	bl	80003f4 <__aeabi_i2d>
 8005c56:	4622      	mov	r2, r4
 8005c58:	4680      	mov	r8, r0
 8005c5a:	4689      	mov	r9, r1
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fc31 	bl	80004c8 <__aeabi_dmul>
 8005c66:	4642      	mov	r2, r8
 8005c68:	4606      	mov	r6, r0
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	4620      	mov	r0, r4
 8005c70:	4629      	mov	r1, r5
 8005c72:	f7fa fa73 	bl	800015c <__adddf3>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	4639      	mov	r1, r7
 8005c7e:	f7fa fd4d 	bl	800071c <__aeabi_ddiv>
 8005c82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c86:	f7fa fa67 	bl	8000158 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4650      	mov	r0, sl
 8005c90:	4659      	mov	r1, fp
 8005c92:	f7fa fa61 	bl	8000158 <__aeabi_dsub>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	f7fa fa5f 	bl	800015c <__adddf3>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	f7fa fa57 	bl	8000158 <__aeabi_dsub>
 8005caa:	9b05      	ldr	r3, [sp, #20]
 8005cac:	4604      	mov	r4, r0
 8005cae:	1798      	asrs	r0, r3, #30
 8005cb0:	f000 0002 	and.w	r0, r0, #2
 8005cb4:	f1c0 0001 	rsb	r0, r0, #1
 8005cb8:	460d      	mov	r5, r1
 8005cba:	f7fa fb9b 	bl	80003f4 <__aeabi_i2d>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	f7fa fbff 	bl	80004c8 <__aeabi_dmul>
 8005cca:	e6e4      	b.n	8005a96 <__kernel_tan+0x46>
 8005ccc:	f1b9 0f01 	cmp.w	r9, #1
 8005cd0:	d036      	beq.n	8005d40 <__kernel_tan+0x2f0>
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	2000      	movs	r0, #0
 8005cda:	493b      	ldr	r1, [pc, #236]	; (8005dc8 <__kernel_tan+0x378>)
 8005cdc:	f7fa fd1e 	bl	800071c <__aeabi_ddiv>
 8005ce0:	2600      	movs	r6, #0
 8005ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ce6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005cea:	4652      	mov	r2, sl
 8005cec:	465b      	mov	r3, fp
 8005cee:	4630      	mov	r0, r6
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa fa31 	bl	8000158 <__aeabi_dsub>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cfe:	f7fa fa2b 	bl	8000158 <__aeabi_dsub>
 8005d02:	4632      	mov	r2, r6
 8005d04:	462b      	mov	r3, r5
 8005d06:	f7fa fbdf 	bl	80004c8 <__aeabi_dmul>
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	4682      	mov	sl, r0
 8005d0e:	468b      	mov	fp, r1
 8005d10:	462b      	mov	r3, r5
 8005d12:	4630      	mov	r0, r6
 8005d14:	4639      	mov	r1, r7
 8005d16:	f7fa fbd7 	bl	80004c8 <__aeabi_dmul>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <__kernel_tan+0x374>)
 8005d1e:	f7fa fa1d 	bl	800015c <__adddf3>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4650      	mov	r0, sl
 8005d28:	4659      	mov	r1, fp
 8005d2a:	f7fa fa17 	bl	800015c <__adddf3>
 8005d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d32:	f7fa fbc9 	bl	80004c8 <__aeabi_dmul>
 8005d36:	4632      	mov	r2, r6
 8005d38:	462b      	mov	r3, r5
 8005d3a:	f7fa fa0f 	bl	800015c <__adddf3>
 8005d3e:	e6aa      	b.n	8005a96 <__kernel_tan+0x46>
 8005d40:	4682      	mov	sl, r0
 8005d42:	468b      	mov	fp, r1
 8005d44:	e6a9      	b.n	8005a9a <__kernel_tan+0x4a>
 8005d46:	bf00      	nop
 8005d48:	54442d18 	.word	0x54442d18
 8005d4c:	3fe921fb 	.word	0x3fe921fb
 8005d50:	33145c07 	.word	0x33145c07
 8005d54:	3c81a626 	.word	0x3c81a626
 8005d58:	74bf7ad4 	.word	0x74bf7ad4
 8005d5c:	3efb2a70 	.word	0x3efb2a70
 8005d60:	32f0a7e9 	.word	0x32f0a7e9
 8005d64:	3f12b80f 	.word	0x3f12b80f
 8005d68:	1a8d1068 	.word	0x1a8d1068
 8005d6c:	3f3026f7 	.word	0x3f3026f7
 8005d70:	fee08315 	.word	0xfee08315
 8005d74:	3f57dbc8 	.word	0x3f57dbc8
 8005d78:	e96e8493 	.word	0xe96e8493
 8005d7c:	3f8226e3 	.word	0x3f8226e3
 8005d80:	1bb341fe 	.word	0x1bb341fe
 8005d84:	3faba1ba 	.word	0x3faba1ba
 8005d88:	db605373 	.word	0xdb605373
 8005d8c:	bef375cb 	.word	0xbef375cb
 8005d90:	a03792a6 	.word	0xa03792a6
 8005d94:	3f147e88 	.word	0x3f147e88
 8005d98:	f2f26501 	.word	0xf2f26501
 8005d9c:	3f4344d8 	.word	0x3f4344d8
 8005da0:	c9560328 	.word	0xc9560328
 8005da4:	3f6d6d22 	.word	0x3f6d6d22
 8005da8:	8406d637 	.word	0x8406d637
 8005dac:	3f9664f4 	.word	0x3f9664f4
 8005db0:	1110fe7a 	.word	0x1110fe7a
 8005db4:	3fc11111 	.word	0x3fc11111
 8005db8:	55555563 	.word	0x55555563
 8005dbc:	3fd55555 	.word	0x3fd55555
 8005dc0:	3e2fffff 	.word	0x3e2fffff
 8005dc4:	3ff00000 	.word	0x3ff00000
 8005dc8:	bff00000 	.word	0xbff00000
 8005dcc:	3fe59427 	.word	0x3fe59427

08005dd0 <fabs>:
 8005dd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4770      	bx	lr

08005dd8 <floor>:
 8005dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ddc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005de0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005de4:	2e13      	cmp	r6, #19
 8005de6:	4607      	mov	r7, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	460c      	mov	r4, r1
 8005dec:	4605      	mov	r5, r0
 8005dee:	dc35      	bgt.n	8005e5c <floor+0x84>
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	da16      	bge.n	8005e22 <floor+0x4a>
 8005df4:	a336      	add	r3, pc, #216	; (adr r3, 8005ed0 <floor+0xf8>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa f9af 	bl	800015c <__adddf3>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	2300      	movs	r3, #0
 8005e02:	f7fa fdf1 	bl	80009e8 <__aeabi_dcmpgt>
 8005e06:	b148      	cbz	r0, 8005e1c <floor+0x44>
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	da5b      	bge.n	8005ec4 <floor+0xec>
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005e12:	4a31      	ldr	r2, [pc, #196]	; (8005ed8 <floor+0x100>)
 8005e14:	433b      	orrs	r3, r7
 8005e16:	42ab      	cmp	r3, r5
 8005e18:	bf18      	it	ne
 8005e1a:	4614      	movne	r4, r2
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	462f      	mov	r7, r5
 8005e20:	e026      	b.n	8005e70 <floor+0x98>
 8005e22:	4a2e      	ldr	r2, [pc, #184]	; (8005edc <floor+0x104>)
 8005e24:	fa42 f806 	asr.w	r8, r2, r6
 8005e28:	ea01 0208 	and.w	r2, r1, r8
 8005e2c:	4302      	orrs	r2, r0
 8005e2e:	d01f      	beq.n	8005e70 <floor+0x98>
 8005e30:	a327      	add	r3, pc, #156	; (adr r3, 8005ed0 <floor+0xf8>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa f991 	bl	800015c <__adddf3>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f7fa fdd3 	bl	80009e8 <__aeabi_dcmpgt>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d0ea      	beq.n	8005e1c <floor+0x44>
 8005e46:	2c00      	cmp	r4, #0
 8005e48:	bfbe      	ittt	lt
 8005e4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005e4e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005e52:	19a4      	addlt	r4, r4, r6
 8005e54:	ea24 0408 	bic.w	r4, r4, r8
 8005e58:	2500      	movs	r5, #0
 8005e5a:	e7df      	b.n	8005e1c <floor+0x44>
 8005e5c:	2e33      	cmp	r6, #51	; 0x33
 8005e5e:	dd0b      	ble.n	8005e78 <floor+0xa0>
 8005e60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005e64:	d104      	bne.n	8005e70 <floor+0x98>
 8005e66:	4602      	mov	r2, r0
 8005e68:	f7fa f978 	bl	800015c <__adddf3>
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4638      	mov	r0, r7
 8005e72:	4619      	mov	r1, r3
 8005e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e78:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005e80:	fa22 f808 	lsr.w	r8, r2, r8
 8005e84:	ea18 0f00 	tst.w	r8, r0
 8005e88:	d0f2      	beq.n	8005e70 <floor+0x98>
 8005e8a:	a311      	add	r3, pc, #68	; (adr r3, 8005ed0 <floor+0xf8>)
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	f7fa f964 	bl	800015c <__adddf3>
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	f7fa fda6 	bl	80009e8 <__aeabi_dcmpgt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d0bd      	beq.n	8005e1c <floor+0x44>
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	da02      	bge.n	8005eaa <floor+0xd2>
 8005ea4:	2e14      	cmp	r6, #20
 8005ea6:	d103      	bne.n	8005eb0 <floor+0xd8>
 8005ea8:	3401      	adds	r4, #1
 8005eaa:	ea25 0508 	bic.w	r5, r5, r8
 8005eae:	e7b5      	b.n	8005e1c <floor+0x44>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005eb6:	fa03 f606 	lsl.w	r6, r3, r6
 8005eba:	4435      	add	r5, r6
 8005ebc:	42bd      	cmp	r5, r7
 8005ebe:	bf38      	it	cc
 8005ec0:	18e4      	addcc	r4, r4, r3
 8005ec2:	e7f2      	b.n	8005eaa <floor+0xd2>
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	462c      	mov	r4, r5
 8005ec8:	e7a8      	b.n	8005e1c <floor+0x44>
 8005eca:	bf00      	nop
 8005ecc:	f3af 8000 	nop.w
 8005ed0:	8800759c 	.word	0x8800759c
 8005ed4:	7e37e43c 	.word	0x7e37e43c
 8005ed8:	bff00000 	.word	0xbff00000
 8005edc:	000fffff 	.word	0x000fffff

08005ee0 <scalbn>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	4616      	mov	r6, r2
 8005ee4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ee8:	4604      	mov	r4, r0
 8005eea:	460d      	mov	r5, r1
 8005eec:	460b      	mov	r3, r1
 8005eee:	b982      	cbnz	r2, 8005f12 <scalbn+0x32>
 8005ef0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ef4:	4303      	orrs	r3, r0
 8005ef6:	d034      	beq.n	8005f62 <scalbn+0x82>
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <scalbn+0xd0>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	f7fa fae4 	bl	80004c8 <__aeabi_dmul>
 8005f00:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <scalbn+0xd4>)
 8005f02:	4604      	mov	r4, r0
 8005f04:	429e      	cmp	r6, r3
 8005f06:	460d      	mov	r5, r1
 8005f08:	da0d      	bge.n	8005f26 <scalbn+0x46>
 8005f0a:	a325      	add	r3, pc, #148	; (adr r3, 8005fa0 <scalbn+0xc0>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	e01c      	b.n	8005f4c <scalbn+0x6c>
 8005f12:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005f16:	42ba      	cmp	r2, r7
 8005f18:	d109      	bne.n	8005f2e <scalbn+0x4e>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	f7fa f91e 	bl	800015c <__adddf3>
 8005f20:	4604      	mov	r4, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	e01d      	b.n	8005f62 <scalbn+0x82>
 8005f26:	460b      	mov	r3, r1
 8005f28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f2c:	3a36      	subs	r2, #54	; 0x36
 8005f2e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005f32:	4432      	add	r2, r6
 8005f34:	428a      	cmp	r2, r1
 8005f36:	dd0c      	ble.n	8005f52 <scalbn+0x72>
 8005f38:	4622      	mov	r2, r4
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	a11a      	add	r1, pc, #104	; (adr r1, 8005fa8 <scalbn+0xc8>)
 8005f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f42:	f000 f83b 	bl	8005fbc <copysign>
 8005f46:	a318      	add	r3, pc, #96	; (adr r3, 8005fa8 <scalbn+0xc8>)
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f7fa fabc 	bl	80004c8 <__aeabi_dmul>
 8005f50:	e7e6      	b.n	8005f20 <scalbn+0x40>
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	dd08      	ble.n	8005f68 <scalbn+0x88>
 8005f56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f62:	4620      	mov	r0, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f68:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005f6c:	da0b      	bge.n	8005f86 <scalbn+0xa6>
 8005f6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005f72:	429e      	cmp	r6, r3
 8005f74:	4622      	mov	r2, r4
 8005f76:	462b      	mov	r3, r5
 8005f78:	dce0      	bgt.n	8005f3c <scalbn+0x5c>
 8005f7a:	a109      	add	r1, pc, #36	; (adr r1, 8005fa0 <scalbn+0xc0>)
 8005f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f80:	f000 f81c 	bl	8005fbc <copysign>
 8005f84:	e7c1      	b.n	8005f0a <scalbn+0x2a>
 8005f86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f8a:	3236      	adds	r2, #54	; 0x36
 8005f8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f94:	4620      	mov	r0, r4
 8005f96:	4629      	mov	r1, r5
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <scalbn+0xd8>)
 8005f9c:	e7d6      	b.n	8005f4c <scalbn+0x6c>
 8005f9e:	bf00      	nop
 8005fa0:	c2f8f359 	.word	0xc2f8f359
 8005fa4:	01a56e1f 	.word	0x01a56e1f
 8005fa8:	8800759c 	.word	0x8800759c
 8005fac:	7e37e43c 	.word	0x7e37e43c
 8005fb0:	43500000 	.word	0x43500000
 8005fb4:	ffff3cb0 	.word	0xffff3cb0
 8005fb8:	3c900000 	.word	0x3c900000

08005fbc <copysign>:
 8005fbc:	b530      	push	{r4, r5, lr}
 8005fbe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc6:	ea42 0503 	orr.w	r5, r2, r3
 8005fca:	4629      	mov	r1, r5
 8005fcc:	bd30      	pop	{r4, r5, pc}
	...

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
